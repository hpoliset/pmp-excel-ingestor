package org.srcm.heartfulness.webservice;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.srcm.heartfulness.helper.CreateEventHelper;
import org.srcm.heartfulness.model.json.request.Event;
import org.srcm.heartfulness.model.json.request.ParticipantIntroductionRequest;
import org.srcm.heartfulness.model.json.request.ParticipantRequest;
import org.srcm.heartfulness.model.json.response.ErrorResponse;
import org.srcm.heartfulness.model.json.response.UpdateIntroductionResponse;
import org.srcm.heartfulness.model.json.response.UserProfile;
import org.srcm.heartfulness.service.PmpParticipantService;
import org.srcm.heartfulness.service.ProgramService;
import org.srcm.heartfulness.service.UserProfileService;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

@RestController
@RequestMapping("/api/participant")
public class ParticipantController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(ParticipantController.class);
	
	@Autowired
	private ProgramService programService;
	
	@Autowired
	private PmpParticipantService participantService;
	
	
	@Autowired
	CreateEventHelper ceh;
	
	
	@Autowired
	private UserProfileService userProfileService;

	
	
	/**
	 * Web service endpoint to fetch list of participants.
	 * 
	 * If list of participants are found successfully, the service returns an
	 * success response body with HTTP status 200.
	 * 
	 * If list of events are not found, the service returns an empty response
	 * body with HTTP status 200.
	 * 
	 * If some exception is raised while processing the request, error response
	 * is returned with respective HttpStatus code.
	 * 
	 * @param encryptedProgramId
	 *            to check whether the program already exists or not.
	 * @param token
	 *            Token to be validated against mysrcm endpoint.
	 * @return A ResponseEntity containing program details if found, and a HTTP
	 *         status code as described in the method comment.
	 */
	@RequestMapping(value = "/getparticipantlist", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getParticipantList(@RequestHeader(value = "Authorization") String token,
			@RequestBody(required = true) Event event) {
		List<ParticipantRequest> participantList = new ArrayList<ParticipantRequest>();
		try {

			if (null == event.getAutoGeneratedEventId() || event.getAutoGeneratedEventId().isEmpty()) {
				LOGGER.debug("Invalid event ID hasbeen sent in the request");
				ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid Event ID");
				return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.PRECONDITION_FAILED);
			}

			UserProfile userProfile = ceh.validateToken(token);
			if (null == userProfile) {
				LOGGER.debug("UserProfile doesnot exists in MySrcm database");
				ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid client credentials");
				return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
			}

			participantList = programService.getParticipantByEventId(event.getAutoGeneratedEventId());
			return new ResponseEntity<List<ParticipantRequest>>(participantList, HttpStatus.OK);

		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid authorization token");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid client credentials");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.REQUEST_TIMEOUT);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Error while fetching profile from mysrcm");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Error while fetching profile from mysrcm");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Error while fetching profile from mysrcm");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid request");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}

	}
	
	
	@RequestMapping(value = "/getparticipantdetails", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getPaticipantDetails(@RequestBody ParticipantRequest request,
			@RequestHeader(value = "Authorization") String token) {
		try {
			if (null == ceh.validateToken(token)) {
				ErrorResponse error = new ErrorResponse("Failed", "Invalid auth token");
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
			} else if (null != request.getSeqId() && null != request.getEventId()) {
				ParticipantRequest participant = participantService.getParticipantBySeqId(request);
				return new ResponseEntity<ParticipantRequest>(participant, HttpStatus.OK);
			} else {
				ErrorResponse error = new ErrorResponse("Failed", "event ID and Seq Id is required");
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.PRECONDITION_FAILED);
			}
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid auth token");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.REQUEST_TIMEOUT);
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			ErrorResponse error = new ErrorResponse("Failed", "Invalid Auth token");
			return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "parse-error : error while parsing json data");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed",
					"json mapping-error : json data is not mapped properly");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "input/output-error ; Please try after sometime");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Please try after sometime.");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
	


	@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> createParticipant(@RequestBody ParticipantRequest participant,
			@RequestHeader(value = "Authorization") String token) {
		try {
			if (null == ceh.validateToken(token)) {
				ErrorResponse error = new ErrorResponse("Failed", "Invalid auth token");
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
			} else {
				Map<String, String> map = ceh.checkPartcicipantMandatoryFields(participant);
				if (!map.isEmpty()) {
					return new ResponseEntity<Map<String, String>>(map, HttpStatus.PRECONDITION_FAILED);
				} else {
					ParticipantRequest newparticipant = participantService.createParticipant(participant);
					return new ResponseEntity<ParticipantRequest>(newparticipant, HttpStatus.OK);
				}
			}
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid auth token");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.REQUEST_TIMEOUT);
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			ErrorResponse error = new ErrorResponse("Failed", "Invalid Auth token");
			return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "parse-error : error while parsing json data");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed",
					"json mapping-error : json data is not mapped properly");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "input/output-error ; Please try after sometime");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (ParseException e) {
			e.printStackTrace();
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Parse Exception");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Please try after sometime.");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@RequestMapping(value = "/update", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> updateParticipant(@RequestBody ParticipantRequest participant,
			@RequestHeader(value = "Authorization") String token) {
		try {
			if (null == ceh.validateToken(token)) {
				ErrorResponse error = new ErrorResponse("Failed", "Invalid auth token");
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
			}
			if (null == participant.getPrintName()) {
				Map<String, String> errors = new HashMap<>();
				errors.put("Failed", "print name cannot be null");
				return new ResponseEntity<Map<String, String>>(errors, HttpStatus.PRECONDITION_FAILED);
			}
			ParticipantRequest newparticipant = participantService.createParticipant(participant);
			return new ResponseEntity<ParticipantRequest>(newparticipant, HttpStatus.OK);
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Invalid auth token");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.REQUEST_TIMEOUT);
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			ErrorResponse error = new ErrorResponse("Failed", "Invalid Auth token");
			return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "parse-error : error while parsing json data");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed",
					"json mapping-error : json data is not mapped properly");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "input/output-error ; Please try after sometime");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Please try after sometime.");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
	
	

	@RequestMapping(value = "/updateintroductionstatus", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> UpdateParticipantIntoroducedStatus(
			@RequestBody ParticipantIntroductionRequest participantRequest,
			@RequestHeader(value = "Authorization") String token) {
		try {
			if (null == ceh.validateToken(token)) {
				ErrorResponse error = new ErrorResponse("Failed", "Invalid Auth token");
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
			} else {
				Map<String, String> map = ceh.checkIntroductionRequestMandatoryFields(participantRequest);
				if (!map.isEmpty()) {
					return new ResponseEntity<Map<String, String>>(map, HttpStatus.PRECONDITION_FAILED);
				} else {
					List<UpdateIntroductionResponse> result = new ArrayList<UpdateIntroductionResponse>();
					for (ParticipantRequest participant : participantRequest.getParticipantIds()) {
						if (null == participant.getSeqId() || participant.getSeqId().isEmpty()) {
							UpdateIntroductionResponse response = new UpdateIntroductionResponse(
									participant.getSeqId(), "Failed", "Seq Id is required.");
							result.add(response);
						} else if (0 == programService.getProgramIdByEventId(participantRequest.getEventId())) {
							UpdateIntroductionResponse response = new UpdateIntroductionResponse(
									participantRequest.getEventId(), "Failed", "Invalid eventID");
							result.add(response);
						} else if (0 != programService.getProgramIdByEventId(participantRequest.getEventId())
								&& null == programService.findParticipantBySeqId(participant.getSeqId(),
										programService.getProgramIdByEventId(participantRequest.getEventId()))) {
							UpdateIntroductionResponse response = new UpdateIntroductionResponse(
									participant.getSeqId(), "Failed", "Invalid seqId");
							result.add(response);
						} else {
							programService.UpdateParticipantsStatus(participant.getSeqId(),
									participantRequest.getEventId(), participantRequest.getIntroduced());
							UpdateIntroductionResponse response = new UpdateIntroductionResponse(
									participant.getSeqId(), "Success",
									"Participant introduced status updated successfully");
							result.add(response);
						}
					}
					return new ResponseEntity<List<UpdateIntroductionResponse>>(result, HttpStatus.OK);
				}
			}
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "client-error : Invalid auth token");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.REQUEST_TIMEOUT);
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			ErrorResponse error = new ErrorResponse("Failed", "Invalid Auth token");
			return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "parse-error : error while parsing json data");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed",
					"json mapping-error : json data is not mapped properly");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "input/output-error ; Please try after sometime");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Exception    :" + e.getMessage());
			ErrorResponse eResponse = new ErrorResponse("Failed", "Please try after sometime.");
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
}
