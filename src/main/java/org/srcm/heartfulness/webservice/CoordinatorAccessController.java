package org.srcm.heartfulness.webservice;

import java.io.IOException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Context;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.srcm.heartfulness.constants.ErrorConstants;
import org.srcm.heartfulness.model.PMPAPIAccessLog;
import org.srcm.heartfulness.model.ProgramCoordinators;
import org.srcm.heartfulness.model.json.request.Event;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlErrorResponse;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlResponse;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlSuccessResponse;
import org.srcm.heartfulness.model.json.response.ErrorResponse;
import org.srcm.heartfulness.model.json.response.UserProfile;
import org.srcm.heartfulness.service.APIAccessLogService;
import org.srcm.heartfulness.service.CoordinatorAccessControlService;
import org.srcm.heartfulness.util.DateUtils;
import org.srcm.heartfulness.util.StackTraceUtils;
import org.srcm.heartfulness.validator.CoordinatorAccessControlValidator;
import org.srcm.heartfulness.validator.EventDashboardValidator;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

/**
 * 
 * @author Koustav Dutta
 *
 */

@RestController
@RequestMapping("/api/coordinatoraccess")
public class CoordinatorAccessController {

	private static final Logger LOGGER = LoggerFactory.getLogger(CoordinatorAccessController.class);

	@Autowired
	CoordinatorAccessControlValidator coordntrAccssCntrlValidator ;

	@Autowired
	APIAccessLogService apiAccessLogService;

	@Autowired
	EventDashboardValidator eventDashboardValidator;

	@Autowired
	CoordinatorAccessControlService coordntrAccssCntrlSrcv;


	@RequestMapping(value = "/addsecondarycoordinator", 
			method = RequestMethod.POST,
			consumes = MediaType.APPLICATION_JSON_VALUE,
			produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> addSecondaryCoordinatorRequest(@RequestHeader(value = "Authorization") String token,
			@RequestBody Event event,@Context HttpServletRequest httpRequest) {

		PMPAPIAccessLog accessLog = new PMPAPIAccessLog(null, httpRequest.getRemoteAddr(), httpRequest.getRequestURI(),
				DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,StackTraceUtils.convertPojoToJson(event));
		int id = 0;
		try{
			id = apiAccessLogService.createPmpAPIAccessLog(accessLog);
		}catch(Exception ex){
			LOGGER.error("Failed to insert into api access log table");
		}

		UserProfile userProfile = null;
		try {
			userProfile = eventDashboardValidator.validateToken(token, id);
			if (null == userProfile) {
				LOGGER.info("UserProfile doesnot exists in MySrcm database");
				CoordinatorAccessControlErrorResponse eResponse = new CoordinatorAccessControlErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage("UserProfile doesnot exists in MySrcm database");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
				try{
					apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				}catch(Exception ex){
					LOGGER.error("Failed to update api access log table");
				}
				return new ResponseEntity<CoordinatorAccessControlErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
			}

			accessLog.setUsername(userProfile.getEmail());

			CoordinatorAccessControlErrorResponse eResponse = coordntrAccssCntrlValidator.checkMandatoryFields(event.getAutoGeneratedEventId());
			if(null != eResponse){
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(eResponse.getError_description());
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
				try{
					apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				}catch(Exception ex){
					LOGGER.error("Failed to update api access log table");
				}
				return new ResponseEntity<CoordinatorAccessControlErrorResponse>(eResponse, HttpStatus.PRECONDITION_REQUIRED);	
			}

			CoordinatorAccessControlResponse response = null;
			try{
				response = coordntrAccssCntrlSrcv.addSecondaryCoordinatorRequest(event.getAutoGeneratedEventId(),userProfile.getEmail());
				if(response instanceof CoordinatorAccessControlErrorResponse){
					accessLog.setStatus(ErrorConstants.STATUS_FAILED);
					accessLog.setErrorMessage(((CoordinatorAccessControlErrorResponse) response).getError_description());
				}else{
					accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
				}
			}catch(DataAccessException daex){
				LOGGER.error("EX : Not able to save secondary coordinator request",daex);
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(daex));
				response = new CoordinatorAccessControlErrorResponse(ErrorConstants.STATUS_FAILED,"Failed to register your request");
			}catch(Exception ex){
				LOGGER.error("DAEX : Not able to save secondary coordinator request",ex);
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ex));
				response = new CoordinatorAccessControlErrorResponse(ErrorConstants.STATUS_FAILED,"Failed to register your request");
			}
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<CoordinatorAccessControlResponse>(response,HttpStatus.OK);

		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid authorization token");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid request");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}

	}

	@RequestMapping(value = "/approve", method = RequestMethod.POST,
			consumes = MediaType.APPLICATION_JSON_VALUE,produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> approveSecondaryCoordinatorRequest(@RequestHeader(value = "Authorization") String token,@RequestBody ProgramCoordinators pgrmCoordinators
			,@Context HttpServletRequest httpRequest) {
		
		PMPAPIAccessLog accessLog = new PMPAPIAccessLog(null, httpRequest.getRemoteAddr(), httpRequest.getRequestURI(),
				DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,StackTraceUtils.convertPojoToJson(pgrmCoordinators));
		int id = 0;
		try{
			id = apiAccessLogService.createPmpAPIAccessLog(accessLog);
		}catch(Exception ex){
			LOGGER.error("Failed to insert into api access log table");
		}

		UserProfile userProfile = null;
		try {
			userProfile = eventDashboardValidator.validateToken(token, id);
			if (null == userProfile) {
				LOGGER.info("UserProfile doesnot exists in MySrcm database");
				CoordinatorAccessControlErrorResponse eResponse = new CoordinatorAccessControlErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage("UserProfile doesnot exists in MySrcm database");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
				try{
					apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				}catch(Exception ex){
					LOGGER.error("Failed to update api access log table");
				}
				return new ResponseEntity<CoordinatorAccessControlErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
			}

			accessLog.setUsername(userProfile.getEmail());
			//coordntrAccssCntrlValidator.validateCoordinatorEmail(); 
			CoordinatorAccessControlResponse response = coordntrAccssCntrlValidator.validateCoordinatorRequest(pgrmCoordinators);
			if(response instanceof CoordinatorAccessControlErrorResponse){
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(((CoordinatorAccessControlErrorResponse) response).getError_description());
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				try{
					apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				}catch(Exception ex){
					LOGGER.error("Failed to update api access log table");
				}
				return new ResponseEntity<CoordinatorAccessControlResponse>(response,HttpStatus.OK);
			}else if(response instanceof CoordinatorAccessControlSuccessResponse){
				accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
				try{
					coordntrAccssCntrlSrcv.approveSecondaryCoordinatorRequest(userProfile.getEmail(),pgrmCoordinators.getCoordinatorEmail(),pgrmCoordinators.getEventId());
					
					//insert into program coordinators table
					//send mail to new coordinator
					
					
				}catch(DataAccessException daex){
					accessLog.setStatus(ErrorConstants.STATUS_FAILED);
					accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(daex));
					
				}catch(Exception ex){
					accessLog.setStatus(ErrorConstants.STATUS_FAILED);
					accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ex));
				}
				
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				try{
					apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				}catch(Exception ex){
					LOGGER.error("Failed to update api access log table");
				}
				//return new ResponseEntity<String>("Completed",HttpStatus.OK);
			}
			
			//return new ResponseEntity<String>("Forcefully Completed",HttpStatus.OK);
			

			//return null;

			//update accesslogs
			
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid authorization token");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
		} catch (HttpClientErrorException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
		} catch (JsonParseException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (JsonMappingException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (IOException e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		} catch (Exception e) {
			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid request");
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			try{
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			}catch(Exception ex){
				LOGGER.error("Failed to update api access log table");
			}
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}
	}

}
