package org.srcm.heartfulness.webservice;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.Context;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.srcm.heartfulness.constants.DashboardConstants;
import org.srcm.heartfulness.constants.ErrorConstants;
import org.srcm.heartfulness.constants.PMPConstants;
import org.srcm.heartfulness.encryption.decryption.AESEncryptDecrypt;
import org.srcm.heartfulness.model.EventPagination;
import org.srcm.heartfulness.model.PMPAPIAccessLog;
import org.srcm.heartfulness.model.User;
import org.srcm.heartfulness.model.json.request.Event;
import org.srcm.heartfulness.model.json.request.SearchRequest;
import org.srcm.heartfulness.model.json.response.ErrorResponse;
import org.srcm.heartfulness.model.json.response.PMPResponse;
import org.srcm.heartfulness.model.json.response.UserProfile;
import org.srcm.heartfulness.service.APIAccessLogService;
import org.srcm.heartfulness.service.ProgramService;
import org.srcm.heartfulness.service.UserProfileService;
import org.srcm.heartfulness.util.DateUtils;
import org.srcm.heartfulness.util.StackTraceUtils;
import org.srcm.heartfulness.validator.EventDashboardValidator;
import org.srcm.heartfulness.validator.impl.PMPAuthTokenValidatorImpl;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;

/**
 * Events Rest Controller - Event Dashboard Related services.
 * 
 * @author Koustav Dutta
 *
 */
@RestController
@RequestMapping("/api/event")
public class EventsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(EventsController.class);

	@Autowired
	private ProgramService programService;

	@Autowired
	Environment env;

	@Autowired
	private AESEncryptDecrypt aesEncryptDecrypt;

	@Autowired
	EventDashboardValidator eventDashboardValidator;

	@Autowired
	private UserProfileService userProfileService;

	@Autowired
	APIAccessLogService apiAccessLogService;

	@Autowired
	PMPAuthTokenValidatorImpl authTokenVldtr;

	/**
	 * Web service endpoint to fetch a particular event.
	 * 
	 * If the event is found successfully, the service returns an success
	 * response body with HTTP status 200.
	 * 
	 * If the event is not found, the service returns response with status
	 * failed with HTTP status 200.
	 * 
	 * If some exception is raised while processing the request, error response
	 * is returned with respective HttpStatus code.
	 * 
	 * @param token
	 *            ,Token to be validated against MySRCM endpoint.
	 * @param event
	 * @return A ResponseEntity containing success message, if created
	 *         successfully, and a HTTP status code as described in the method
	 *         comment.
	 * @throws IOException
	 */
	@RequestMapping(value = "/geteventdetails",
			method = RequestMethod.POST, 
			consumes = MediaType.APPLICATION_JSON_VALUE, 
			produces = MediaType.APPLICATION_JSON_VALUE )

	public ResponseEntity<?> getEventDetails(@RequestHeader(value = "Authorization") String authToken,
			@RequestBody Event event, @Context HttpServletRequest httpRequest) {

		//save request details in PMP
		PMPAPIAccessLog accessLog = createPMPAPIAccessLog(null,httpRequest,StackTraceUtils.convertPojoToJson(event));

		//validate token details
		PMPResponse pmpResponse = authTokenVldtr.validateAuthToken(authToken, accessLog);
		if(pmpResponse instanceof ErrorResponse){
			return new ResponseEntity<PMPResponse>(pmpResponse, HttpStatus.OK);
		}

		LOGGER.info("Trying to fetch event details for eventID : {} ", event.getAutoGeneratedEventId());
		Event eventdetails = new Event();
		User user = userProfileService.loadUserByEmail(accessLog.getUsername());


		if (null == user) {
			LOGGER.info(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			accessLog.setErrorMessage(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			updatePMPAPIAccessLog(accessLog,ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP, StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}

		List<String> emailList = new ArrayList<String>();
		if(null != user.getAbyasiId()){
			emailList = userProfileService.getEmailsWithAbhyasiId(user.getAbyasiId());
		}
		if(emailList.size() == 0){
			emailList.add(accessLog.getUsername());
		}

		Map<String, String> errors = new HashMap<String, String>();
		if (null == event.getAutoGeneratedEventId() || event.getAutoGeneratedEventId().isEmpty()) {
			errors.put("eventId", DashboardConstants.INVALID_OR_EMPTY_EVENTID);
			eventdetails.setErrors(errors);
			eventdetails.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(DashboardConstants.INVALID_OR_EMPTY_EVENTID);
		} else {
			int programId = 0;

			try{
				programId = programService.getProgramIdByEventId(event.getAutoGeneratedEventId());
				if (programId > 0) {
					eventdetails = programService.getEventDetails(emailList,user.getRole(),event.getAutoGeneratedEventId());
					accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
				} else {
					errors.put("eventId", DashboardConstants.INVALID_EVENTID);
					eventdetails.setErrors(errors);
					eventdetails.setStatus(ErrorConstants.STATUS_FAILED);
					accessLog.setErrorMessage(DashboardConstants.INVALID_EVENTID);
				}
			} catch (Exception e) {
				LOGGER.error("Exception while fetching event for event Id   : {},{}", event.getAutoGeneratedEventId(),e);
				ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.EVENT_PROCESSING_FAILED);
				updatePMPAPIAccessLog(accessLog, ErrorConstants.STATUS_FAILED, StackTraceUtils.convertStackTracetoString(e), StackTraceUtils.convertPojoToJson(eResponse));
				return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}

		LOGGER.info("Fetched event details for eventID : {} ", event.getAutoGeneratedEventId());
		updatePMPAPIAccessLog(accessLog,accessLog.getStatus(),accessLog.getErrorMessage(), StackTraceUtils.convertPojoToJson(eventdetails));
		return new ResponseEntity<Event>(eventdetails, HttpStatus.OK);
	} 

	/**
	 * Web service endpoint to fetch list of events.
	 * 
	 * If list of events are found successfully, the service returns an success
	 * response body with HTTP status 200.
	 * 
	 * If list of events are not found, the service returns an empty response
	 * body with HTTP status 200.
	 * 
	 * If some exception is raised while processing the request, error response
	 * is returned with respective HttpStatus code.
	 * 
	 * @param token
	 *            ,Token to be validated against MySRCM endpoint.
	 * @return A ResponseEntity containing success message, if created
	 *         successfully, and a HTTP status code as described in the method
	 *         comment.
	 * @throws JsonProcessingException
	 */
	@RequestMapping(value = "/geteventlist", 
			method = RequestMethod.POST, 
			consumes = MediaType.APPLICATION_JSON_VALUE, 
			produces = MediaType.APPLICATION_JSON_VALUE)

	public ResponseEntity<?> getEventList(@RequestHeader(value = "Authorization") String authToken,
			@Context HttpServletRequest httpRequest, @RequestBody EventPagination eventPagination) {


		//save request details in PMP
		PMPAPIAccessLog accessLog = createPMPAPIAccessLog(null,httpRequest,StackTraceUtils.convertPojoToJson(eventPagination));

		//validate token details
		PMPResponse pmpResponse = authTokenVldtr.validateAuthToken(authToken, accessLog);
		if(pmpResponse instanceof ErrorResponse){
			return new ResponseEntity<PMPResponse>(pmpResponse, HttpStatus.OK);
		}

		int offset = 0;
		List<Event> eventList = new ArrayList<>();
		List<String> emailList = new ArrayList<String>();
		User user = userProfileService.loadUserByEmail(accessLog.getUsername());

		if (null == user) {

			LOGGER.info(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			accessLog.setErrorMessage(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			updatePMPAPIAccessLog(accessLog,ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP, StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}

		String error = eventDashboardValidator.validatePaginationProperties(eventPagination);
		if (!error.isEmpty()) {
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, error);
			updatePMPAPIAccessLog(accessLog,ErrorConstants.STATUS_FAILED,error, StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.PRECONDITION_FAILED);
		}

		offset = (eventPagination.getPageIndex() - 1) * eventPagination.getPageSize();

		if(null != user.getAbyasiId()){
			emailList = userProfileService.getEmailsWithAbhyasiId(user.getAbyasiId());
		}
		if(emailList.size() == 0){
			emailList.add(accessLog.getUsername());
		}

		try{

			eventPagination.setTotalCount(programService.getProgramCountWithUserRoleAndEmailId(emailList,user.getRole()));

			LOGGER.info("Trying to get event list for logged in user {}",accessLog.getUsername());
			eventList = programService.getEventListByEmailAndRole(emailList, user.getRole(), offset,eventPagination.getPageSize());
			eventPagination.setEventList(eventList);
			accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
		} catch(Exception ex){
			LOGGER.error("Exception while fetching event list for logged in user {}{}",accessLog.getUsername(),ex);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.EVENT_PROCESSING_FAILED);
			updatePMPAPIAccessLog(accessLog, ErrorConstants.STATUS_FAILED, StackTraceUtils.convertStackTracetoString(ex), StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}

		String responseBody = "TotalCount : " + eventPagination.getTotalCount() + " PageIndex : "
				+ eventPagination.getPageIndex() + " Page Size : " + eventPagination.getPageSize()
				+ " Event list size returned : " + eventPagination.getEventList().size();

		updatePMPAPIAccessLog(accessLog,accessLog.getStatus(),accessLog.getErrorMessage(), responseBody);
		return new ResponseEntity<EventPagination>(eventPagination, HttpStatus.OK);
	} 

	/**
	 * web service endpoint to search the events based on search field and text
	 * given.
	 * 
	 * @param token
	 * @param searchRequest
	 * @return
	 */
	@RequestMapping(value = "/search", 
			method = RequestMethod.POST, 
			consumes = MediaType.APPLICATION_JSON_VALUE, 
			produces = MediaType.APPLICATION_JSON_VALUE)

	public ResponseEntity<?> searchEvents(@RequestHeader(value = "Authorization") String authToken,
			@RequestBody SearchRequest searchRequest, @Context HttpServletRequest httpRequest) {

		//save request details in PMP
		PMPAPIAccessLog accessLog = createPMPAPIAccessLog(null,httpRequest,StackTraceUtils.convertPojoToJson(searchRequest));

		//validate token details
		PMPResponse pmpResponse = authTokenVldtr.validateAuthToken(authToken, accessLog);
		if(pmpResponse instanceof ErrorResponse){
			return new ResponseEntity<PMPResponse>(pmpResponse, HttpStatus.OK);
		}

		int offset = 0;
		List<String> emailList = new ArrayList<String>();

		User user = userProfileService.loadUserByEmail(accessLog.getUsername());

		if (null == user) {

			LOGGER.info(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			accessLog.setErrorMessage(DashboardConstants.USER_UNAVAILABLE_IN_PMP);
			updatePMPAPIAccessLog(accessLog,ErrorConstants.STATUS_FAILED,DashboardConstants.USER_UNAVAILABLE_IN_PMP, StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
		}

		EventPagination eventPgntn = new EventPagination();
		eventPgntn.setPageIndex(searchRequest.getPageIndex());
		eventPgntn.setPageSize(searchRequest.getPageSize());
		String error = eventDashboardValidator.validatePaginationProperties(eventPgntn);
		if (!error.isEmpty()) {
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, error);
			updatePMPAPIAccessLog(accessLog,ErrorConstants.STATUS_FAILED,accessLog.getErrorMessage(), StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.PRECONDITION_FAILED);
		}

		offset = (eventPgntn.getPageIndex() - 1) * eventPgntn.getPageSize();
		if(null != user.getAbyasiId()){
			emailList = userProfileService.getEmailsWithAbhyasiId(user.getAbyasiId());
		}
		if(emailList.size() == 0){
			emailList.add(accessLog.getUsername());
		}

		try{

			searchRequest.setTotalCount(programService.getPgrmCountBySrchParamsWithUserRoleAndEmailId(searchRequest,emailList, user.getRole()));
			LOGGER.info("Trying to search event list for logged in user {}",accessLog.getUsername());
			searchRequest.setEventList(programService.searchEventsWithUserRoleAndEmailId(searchRequest,emailList,user.getRole(), offset));
			accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
		} catch(Exception ex){
			LOGGER.error("Exception while searching event list for logged in user {}{}",accessLog.getUsername(),ex);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.EVENT_PROCESSING_FAILED);
			updatePMPAPIAccessLog(accessLog, ErrorConstants.STATUS_FAILED, StackTraceUtils.convertStackTracetoString(ex), StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}

		String responseBody = "Total Count : " + searchRequest.getTotalCount() 
											   + " Page Index : " + searchRequest.getPageIndex() 
											   + " Page Size : " + searchRequest.getPageSize() 
											   + "Event list size : " + searchRequest.getEventList().size();

		updatePMPAPIAccessLog(accessLog, accessLog.getStatus(), accessLog.getErrorMessage(), responseBody);
		return new ResponseEntity<SearchRequest>(searchRequest, HttpStatus.OK);

	}
	
	
	/**
	 * Web service endpoint to create an event.
	 * 
	 * If event is created successfully, the service returns an event with
	 * eventId in response body with HTTP status 200.
	 * 
	 * If some exception is raised while processing the request, error response
	 * is returned with respective HttpStatus code.
	 * 
	 * @param Event
	 *            to create an event in the pmp database.
	 * @param token
	 *            Token to be validated against MySRCM endpoint.
	 * @return A ResponseEntity containing success message if found, and a HTTP
	 *         status code as described in the method comment.
	 * @param program
	 * @param token
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/save", 
			method = RequestMethod.POST, 
			consumes = MediaType.APPLICATION_JSON_VALUE, 
			produces = MediaType.APPLICATION_JSON_VALUE)

	public ResponseEntity<?> saveEvent(@RequestBody Event event,
			@RequestHeader(value = "Authorization") String authToken,
			@Context HttpServletRequest httpRequest) {

		//save request details in PMP
		PMPAPIAccessLog accessLog = createPMPAPIAccessLog(null,httpRequest,StackTraceUtils.convertPojoToJson(event));

		//validate token details
		PMPResponse pmpResponse = authTokenVldtr.validateAuthToken(authToken, accessLog);
		if(pmpResponse instanceof ErrorResponse){
			return new ResponseEntity<PMPResponse>(pmpResponse, HttpStatus.OK);
		}

		try{
			programService.createOrUpdateProgram(event, accessLog.getId());
		} catch (Exception e) {

			LOGGER.error("Exception while saving/creating event   : {}", e);
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,DashboardConstants.EVENT_PROCESSING_FAILED);
			updatePMPAPIAccessLog(accessLog, ErrorConstants.STATUS_FAILED, StackTraceUtils.convertStackTracetoString(e), StackTraceUtils.convertPojoToJson(eResponse));
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		}

		//update response details in PMP
		updatePMPAPIAccessLog(accessLog,event.getStatus(), null != event.getErrors() ? event.getErrors().toString() : null, StackTraceUtils.convertPojoToJson(event));
		return new ResponseEntity<Event>(event, HttpStatus.OK);

	}
	
	/**
	 * Web service endpoint to the get the events count by category based on
	 * logged in user.
	 * 
	 * @param token
	 *            is for the authorizing the user and gets the user profile from
	 *            the token
	 * @return ResponseEntity containing status and its description based on
	 *         deletion, and a HTTP status code as described in the method
	 *         comment.
	 */
	@RequestMapping(value = "/geteventcountbycategory", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> geteventCountByCategory(@RequestHeader(value = "Authorization") String token,
			@Context HttpServletRequest httpRequest) throws ParseException {
		PMPAPIAccessLog accessLog = new PMPAPIAccessLog(null, httpRequest.getRemoteAddr(), httpRequest.getRequestURI(),
				DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null, "");
		apiAccessLogService.createPmpAPIAccessLog(accessLog);
		UserProfile userProfile = null;
		try {
			boolean isAdmin = false;
			userProfile = eventDashboardValidator.validateToken(token, accessLog.getId());
			if (null == userProfile) {
				ErrorResponse error = new ErrorResponse(ErrorConstants.STATUS_FAILED, ErrorConstants.INVALID_AUTH_TOKEN);
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage("UserProfile doesnot exists in MySrcm database");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(error));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<ErrorResponse>(error, HttpStatus.UNAUTHORIZED);
			} else {
				accessLog.setUsername(null == userProfile.getUser_email() ? userProfile.getEmail() 
						: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email());

				User user = userProfileService.loadUserByEmail(null == userProfile.getUser_email() ? userProfile.getEmail() 
						: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email());

				if (null != user && PMPConstants.LOGIN_ROLE_ADMIN.equalsIgnoreCase(user.getRole())) {
					isAdmin = true;
				}
				Map<String, Integer> resultMap = new HashMap<String, Integer>();
				List<String> Eventcategories = programService.getAllEventCategories();
				resultMap.put(PMPConstants.TOTAL_EVENTS,
						programService.getEventCountByEmail(null == userProfile.getUser_email() ? userProfile.getEmail() 
								: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email(), isAdmin));
				resultMap.put(PMPConstants.UN_CATEGORIZED,
						programService.getNonCategorizedEventsByEmail(null == userProfile.getUser_email() ? userProfile.getEmail() 
								: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email(), isAdmin));
				for (String eventCategory : Eventcategories) {
					resultMap.put(eventCategory.toUpperCase(),
							programService.getEventCountByCategory(null == userProfile.getUser_email() ? userProfile.getEmail() 
									: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email(), isAdmin, eventCategory));
				}
				resultMap.put(PMPConstants.MISCELLANEOUS,
						programService.getMiscellaneousEventsByEmail(null == userProfile.getUser_email() ? userProfile.getEmail() 
								: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email(), isAdmin, Eventcategories));
				accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(resultMap));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<Map<String, Integer>>(resultMap, HttpStatus.OK);

			}
		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {

			LOGGER.error("IllegalBlockSizeException | NumberFormatException | BadPaddingException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid authorization token");

			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);

		} catch (HttpClientErrorException e) {

			LOGGER.error("HttpClientErrorException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);

		} catch (JsonParseException |JsonMappingException e) {

			LOGGER.error("JsonParseException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while processing request");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);

		}catch (IOException e) {

			LOGGER.error("IOException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);

		} catch (Exception e) {

			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid request");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);

		}
	}

	@RequestMapping(value = "/fetcheventdetails", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> getEventDetailsWithDecryptedID(@RequestHeader(value = "Authorization") String token,
			@RequestBody Event event, @Context HttpServletRequest httpRequest) {
		PMPAPIAccessLog accessLog = new PMPAPIAccessLog(null, httpRequest.getRemoteAddr(), httpRequest.getRequestURI(),
				DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,
				StackTraceUtils.convertPojoToJson(event));
		List<String> emailList = new ArrayList<String>();
		apiAccessLogService.createPmpAPIAccessLog(accessLog);
		UserProfile userProfile = null;

		try {
			Event eventdetails = new Event();
			userProfile = eventDashboardValidator.validateToken(token, accessLog.getId());
			if (null == userProfile) {
				LOGGER.info("UserProfile doesnot exists in MySrcm database");
				ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid auth token.");
				accessLog.setErrorMessage("UserProfile doesnot exists in MySrcm database");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);
			}
			accessLog.setUsername(null == userProfile.getUser_email() ? userProfile.getEmail() 
					: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email());

			User user = userProfileService.loadUserByEmail(null == userProfile.getUser_email() ? userProfile.getEmail() 
					: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email());

			if (null == user) {
				LOGGER.info("UserProfile doesnot exists in PMP database");
				ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
						"User doesnot exists in PMP database");
				accessLog.setErrorMessage("User doesnot exists in PMP database");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);
			}

			if(null != user.getAbyasiId()){
				emailList = userProfileService.getEmailsWithAbhyasiId(user.getAbyasiId());
			}
			if(emailList.size() == 0){
				emailList.add(null == userProfile.getUser_email() ? userProfile.getEmail() 
						: userProfile.getUser_email().isEmpty() ? userProfile.getEmail() : userProfile.getUser_email());
			}

			Map<String, String> errors = new HashMap<String, String>();
			if (null == event.getAutoGeneratedEventId() || event.getAutoGeneratedEventId().isEmpty()) {
				errors.put("eventId", "Invalid Event ID");
				eventdetails.setErrors(errors);
				eventdetails.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			} else {
				int programId = programService.getProgramIdByEventId(aesEncryptDecrypt.decrypt(
						event.getAutoGeneratedEventId(), env.getProperty(PMPConstants.SECURITY_TOKEN_KEY)));

				if (programId > 0) {
					accessLog.setStatus(ErrorConstants.STATUS_SUCCESS);
					eventdetails = programService.getEventDetails(emailList,user.getRole(),aesEncryptDecrypt.decrypt(
							event.getAutoGeneratedEventId(), env.getProperty(PMPConstants.SECURITY_TOKEN_KEY)));
				} else {
					errors.put("eventId", "Event Id doesnot exist");
					eventdetails.setErrors(errors);
					eventdetails.setStatus(ErrorConstants.STATUS_FAILED);
					accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				}
			}
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eventdetails));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Event>(eventdetails, HttpStatus.OK);

		} catch (IllegalBlockSizeException | NumberFormatException | BadPaddingException e) {

			LOGGER.error("IllegalBlockSizeException | NumberFormatException | BadPaddingException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid authorization token");

			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);

		} catch (HttpClientErrorException e) {

			LOGGER.error("HttpClientErrorException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid client credentials");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.UNAUTHORIZED);

		} catch (JsonParseException |JsonMappingException e) {

			LOGGER.error("JsonParseException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while processing request");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);

		}catch (IOException e) {

			LOGGER.error("IOException    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED,
					"Error while fetching profile from MySRCM");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.BAD_REQUEST);

		} catch (Exception e) {

			LOGGER.error("Exception    :" + StackTraceUtils.convertStackTracetoString(e));
			ErrorResponse eResponse = new ErrorResponse(ErrorConstants.STATUS_FAILED, "Invalid request");
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(eResponse));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<ErrorResponse>(eResponse, HttpStatus.INTERNAL_SERVER_ERROR);

		}
	}


	private PMPAPIAccessLog createPMPAPIAccessLog(String username,HttpServletRequest httpRequest,String requestBody){

		PMPAPIAccessLog accessLog = new PMPAPIAccessLog(username, httpRequest.getRemoteAddr(), 
				httpRequest.getRequestURI(),DateUtils.getCurrentTimeInMilliSec(), null, 
				ErrorConstants.STATUS_FAILED, null,requestBody);
		apiAccessLogService.createPmpAPIAccessLog(accessLog);
		return accessLog;
	}


	private void updatePMPAPIAccessLog(PMPAPIAccessLog pmpApiAccessLog, String status, String errorMessage, String responseBody){

		pmpApiAccessLog.setStatus(status);
		pmpApiAccessLog.setErrorMessage(errorMessage);
		pmpApiAccessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
		pmpApiAccessLog.setResponseBody(responseBody);
		apiAccessLogService.updatePmpAPIAccessLog(pmpApiAccessLog);
	}

}
