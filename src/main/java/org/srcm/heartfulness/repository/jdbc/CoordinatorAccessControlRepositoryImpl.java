package org.srcm.heartfulness.repository.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.SecondaryCoordinatorRequest;
import org.srcm.heartfulness.repository.CoordinatorAccessControlRepository;

/**
 * 
 * @author himasreev
 *
 */
@Repository
public class CoordinatorAccessControlRepositoryImpl implements CoordinatorAccessControlRepository {

	private static Logger LOGGER = LoggerFactory.getLogger(CoordinatorAccessControlRepositoryImpl.class);

	private JdbcTemplate jdbcTemplate;
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	private SimpleJdbcInsert saveScndryCordntrDetails;

	@Autowired
	public CoordinatorAccessControlRepositoryImpl(DataSource dataSource) {
		this.saveScndryCordntrDetails=new SimpleJdbcInsert(dataSource).withTableName("event_access_request")
				.usingGeneratedKeyColumns("request_id");
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}


	@Override
	public Program getProgramIdByEventId(String autoGeneratedEventId) {
		Map<String, Object> params = new HashMap<>();
		params.put("auto_generated_event_id", autoGeneratedEventId);
		try{
			return this.namedParameterJdbcTemplate.queryForObject(
					"SELECT program_id,coordinator_email,preceptor_id_card_number FROM program WHERE auto_generated_event_id=:auto_generated_event_id", params,
					BeanPropertyRowMapper.newInstance(Program.class));
		}catch(DataAccessException daex){
			LOGGER.error("DataAccess problem while fetching program details{}",daex);
			return new Program();
		}catch(Exception ex){
			LOGGER.error("Exception while fetching program details{}",ex);
			return new Program();
		}
	}

	@Override
	public int getUserIdbyUserEmail(String userEmail) {
		Map<String, Object> params = new HashMap<>();
		params.put("email", userEmail);
		try{
			int id = this.jdbcTemplate.query("SELECT id FROM user WHERE email= ?",
					new Object[] { userEmail }, new ResultSetExtractor<Integer>() {
				@Override
				public Integer extractData(ResultSet resultSet) throws SQLException, DataAccessException {
					if (resultSet.next()) {
						return resultSet.getInt(1);
					}
					return 0;
				}
			});
			return id;
		}catch(DataAccessException daex){
			LOGGER.error("DataAccess problem while fetching user details {}",daex);
			return 0;
		}catch(Exception ex){
			ex.printStackTrace();
			LOGGER.error("Exception while fetching user details {}",ex);
			return 0;
		}

	}

	@Override
	public void saveSecondaryCoordinatorRequest(SecondaryCoordinatorRequest scReq) {
		BeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(scReq);
		if (scReq.getRequestId() == 0) {
			Number newId = this.saveScndryCordntrDetails.executeAndReturnKey(parameterSource);
			scReq.setRequestId(newId.intValue());
		} 
	}


}
