package org.srcm.heartfulness.validator;

import org.srcm.heartfulness.model.ProgramCoordinators;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlErrorResponse;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlResponse;

/**
 * 
 * @author Koustav Dutta
 *
 */

public interface CoordinatorAccessControlValidator {

	/**
	 * This method is used to validate the mandatory event params.
	 * @param autoGeneratedEventId user should not pass this value null
	 * or empty
	 * @return CoordinatorAccessControlErrorResponse is the validation 
	 * fails else null is returned.
	 */
	CoordinatorAccessControlErrorResponse checkMandatoryFields(String autoGeneratedEventId);

	/**
	 * This method is used to validate the mandatory params 
	 * before approving request for a secondary coordinator.
	 * @param approvedBy email of the primary coordinator
	 * or the preceptor for that event.
	 * @param pgrmCoordinators to get the email of the secondary coordinator 
	 * and the eventId for which secondary coordinator has requested for access.
	 * @return CoordinatorAccessControlResponse depending on the response is 
	 * success or failure.
	 */
	CoordinatorAccessControlResponse validateCoordinatorRequest(String approvedBy,ProgramCoordinators pgrmCoordinators);

	/**
	 * This method is used to validate the mandatory params required
	 * in-order to fetch the list of secondary coordinator requests.
	 * @param loggedInUserEmail email of the primary coordinator or preceptor.
	 * @param autoGeneratedEventId to get the programId of an event.
	 * @return CoordinatorAccessControlResponse depending on the response is 
	 * success or failure.
	 */
	CoordinatorAccessControlResponse validateRequesterDetails(String loggedInUserEmail, String autoGeneratedEventId);
	

}
