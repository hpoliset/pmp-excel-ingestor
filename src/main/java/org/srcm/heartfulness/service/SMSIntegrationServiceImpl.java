package org.srcm.heartfulness.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.HttpClientErrorException;
import org.srcm.heartfulness.constants.SMSConstants;
import org.srcm.heartfulness.encryption.decryption.AESEncryptDecrypt;
import org.srcm.heartfulness.model.Participant;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.SMS;
import org.srcm.heartfulness.model.json.googleapi.response.AddressComponents;
import org.srcm.heartfulness.model.json.googleapi.response.GoogleResponse;
import org.srcm.heartfulness.repository.ParticipantRepository;
import org.srcm.heartfulness.repository.ProgramRepository;
import org.srcm.heartfulness.repository.SMSIntegrationRepository;
import org.srcm.heartfulness.rest.template.SmsGatewayRestTemplate;
import org.srcm.heartfulness.util.SmsUtil;

@Service
public class SMSIntegrationServiceImpl implements SMSIntegrationService {

	private static Logger LOGGER = LoggerFactory.getLogger(SMSIntegrationServiceImpl.class);

	@Autowired
	ProgramRepository programRepository;

	@Autowired
	ParticipantRepository participantRepository;

	@Autowired
	SMSIntegrationRepository smsIntegrationRepository;

	@Autowired
	SmsGatewayRestTemplate smsGatewayRestTemplate;

	@Autowired
	AESEncryptDecrypt EncryptDecrypt;

	@Autowired
	Environment env;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.SMSIntegrationService#createEvent(org.srcm
	 * .heartfulness.model.SMS)
	 */
	@Override
	@Transactional
	public String createEvent(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length == 5) {
			String subKeyword = contents.length >= 2 ? contents[1] : null;// Subkeyword
			if (subKeyword != null && !subKeyword.isEmpty()
					&& subKeyword.equals(SMSConstants.SMS_CREATE_EVENT_SUB_KEYWORD)) {
				String eventName = contents.length >= 3 ? contents[2] : null;// Event
																				// Name
				String abhyasiId = contents.length >= 4 ? contents[3] : null;// Abhyasi
																				// Id
				String pincode = contents.length >= 5 ? contents[4] : null;// Abhyasi
				// Id
				// Need to do preceptor or abhyasi's mobile number and abhyasi
				// ID by calling MySRCM API
				if ((eventName != null && !eventName.isEmpty()) && (abhyasiId != null && !abhyasiId.isEmpty())
						&& (pincode != null && !pincode.isEmpty())) {
					Program program = new Program();
					GoogleResponse googleResponse = new GoogleResponse();
					if (eventName != null && !eventName.isEmpty()) {
						program.setProgramChannel(eventName);
						try {
							googleResponse = smsGatewayRestTemplate.getLocationdetails("India", pincode);
						} catch (HttpClientErrorException | IOException e) {
							e.printStackTrace();
						}
						if (googleResponse != null) {
							if (googleResponse.getStatus().equals("OK")) {
								List<AddressComponents> addressComponents = new ArrayList<AddressComponents>();
								if (!googleResponse.getResults().isEmpty()) {
									addressComponents = googleResponse.getResults().get(0).getAddress_components();
									for (AddressComponents addressComponent : addressComponents) {
										if (addressComponent.getTypes().contains("locality")) {
											program.setEventCity(addressComponent.getLong_name());
										} else if (addressComponent.getTypes().contains("administrative_area_level_1")) {
											program.setEventState(addressComponent.getLong_name());
										} else if (addressComponent.getTypes().contains("country")) {
											program.setEventCountry(addressComponent.getLong_name());
										}
									}
								}
								program.setCreatedBy("admin");
								program.setCreateTime(new Date());
								program.setCoordinatorMobile(sms.getSenderMobile());
								if (programRepository.isProgramExist(program)) {
									response = SMSConstants.SMS_CREATE_EVENT_RESPONSE_DUPLICATE_EVENT;
								} else {
									program.setAutoGeneratedEventId(SMSConstants.SMS_EVENT_ID_PREFIX
											+ SmsUtil.generateRandomNumber(6));
									program.setAutoGeneratedIntroId(SMSConstants.SMS_INTRO_ID_PREFIX
											+ SmsUtil.generateRandomNumber(7));
									programRepository.save(program);
									LOGGER.debug("Created Program" + program);
									response = SMSConstants.SMS_CREATE_EVENT_RESPONSE_SUCCESS_1
											+ program.getAutoGeneratedEventId()
											+ SMSConstants.SMS_CREATE_EVENT_RESPONSE_SUCCESS_2
											+ program.getAutoGeneratedIntroId()
											+ SMSConstants.SMS_CREATE_EVENT_RESPONSE_SUCCESS_4
											+ SMSConstants.SMS_HEARTFULNESS_UPDATEEVENT_URL
											+ "?id="
											+ EncryptDecrypt.encrypt(program.getAutoGeneratedEventId(),
													env.getProperty("security.encrypt.token")) // encrypted
																								// eventid
											+ SMSConstants.SMS_CREATE_EVENT_RESPONSE_SUCCESS_5;
								}
							}else {
								response =  SMSConstants.SMS_CREATE_EVENT_INVALID_ZIPCODE_RESPONSE_1 + pincode 
										+ SMSConstants.SMS_CREATE_EVENT_INVALID_ZIPCODE_RESPONSE_2;
								
							}
						} 
					}
				} else {
					LOGGER.debug("Insufficient Content");
					response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
							+ SMSConstants.SMS_HELP_FORMAT;
				}

			}
		} else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}

		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.SMSIntegrationService#updateEvent(org.srcm
	 * .heartfulness.model.SMS)
	 */
	@Override
	@Transactional
	public String updateEvent(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length==4) {
			String subKeyword = contents.length >= 2 ? contents[1] : null;// Subkeyword
			if (subKeyword != null && !subKeyword.isEmpty()
					&& subKeyword.equals(SMSConstants.SMS_UPDATE_EVENT_SUB_KEYWORD)) {
				String oldEventId = contents.length >= 3 ? contents[2] : null;// Event
																				// Name
				String newEventName = contents.length >= 4 ? contents[3] : null;// New
																				// Event
																				// nameyui
				if ((oldEventId != null && !oldEventId.isEmpty()) && (newEventName != null && !newEventName.isEmpty())) {
					Program program = new Program();
					if (oldEventId != null && !oldEventId.isEmpty()) {
						program = programRepository.findByAutoGeneratedEventId(oldEventId);
						if (program.getProgramId() == 0) {
							response = SMSConstants.SMS_UPDATE_EVENT_RESPONSE_NOT_AVAILABLE_1 + oldEventId
									+ SMSConstants.SMS_UPDATE_EVENT_RESPONSE_NOT_AVAILABLE_2;
						} else {
							program.setProgramChannel(newEventName);
							program.setUpdatedBy("admin");
							program.setUpdateTime(new Date());
							if (programRepository.isProgramExist(program)) {
								response = SMSConstants.SMS_UPDATE_EVENT_RESPONSE_ALREADY_EXISTS_1 + newEventName
										+ SMSConstants.SMS_UPDATE_EVENT_RESPONSE_ALREADY_EXISTS_2;
							} else {
								programRepository.save(program);
								LOGGER.debug("Created Program" + program);
								response = SMSConstants.SMS_UPDATE_EVENT_RESPONSE_SUCCESS_1;
							}
						}

					}
				} else {
					LOGGER.debug("Insufficient Content");
					response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
							+ SMSConstants.SMS_HELP_FORMAT;
				}

			}
		} else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}
		
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.SMSIntegrationService#createParticipant
	 * (org.srcm.heartfulness.model.SMS)
	 */
	@Override
	@Transactional
	public String createParticipant(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length>=4 && contents.length <= 7) {
			String participantName = null;
			String mailId = null;
			String firstName = null;
			String lastName = null;
			String middleName = null;
			String seqNum = null;
			String eventId = contents.length >= 3 ? contents[2] : null;// event
			String lastKeyword = contents[contents.length - 1];
			if (lastKeyword.contains("@")) {
				mailId = contents[contents.length - 1];
				if (contents.length == 5) {
					participantName = contents.length == 5 ? contents[3] : null;
				} else if (contents.length > 5) {
					firstName = contents[3];
					if (contents.length == 6) {
						lastName = contents[4];
						participantName = firstName + " " + lastName;
					} else if (contents.length == 7) {
						middleName = contents[4];
						lastName = contents[5];
						participantName = firstName + " " + middleName + " " + lastName;
					}
				}

			} else {
				if (contents.length == 4) {
					participantName = contents.length == 4 ? contents[3] : null;
				} else if (contents.length > 4) {
					firstName = contents[3];
					if (contents.length == 5) {
						lastName = contents[4];
						participantName = firstName + " " + lastName;
					} else if (contents.length == 6) {
						middleName = contents[4];
						lastName = contents[5];
						participantName = firstName + " " + middleName + " " + lastName;
					}
				}

			}
			Program program = new Program();
			if (eventId != null && !eventId.isEmpty()) {
				if (participantName != null && !participantName.isEmpty()) {
					program = programRepository.findByAutoGeneratedEventId(eventId);
					if (program.getProgramId() > 0) {
						Participant participant = new Participant();
						participant.setPrintName(participantName);
						participant.setEmail(mailId);
						participant.setFirstName(firstName);
						participant.setMiddleName(middleName);
						participant.setLastName(lastName);
						participant.setMobilePhone(sms.getSenderMobile());
						participant.setSeqId(SmsUtil.generateFourDigitPIN());
						participant.setProgramId(program.getProgramId());
						participantRepository.save(participant);
						response = SMSConstants.SMS_CREATE_PARTICIPANT_RESPONSE_SUCCESS_1
								+ SMSConstants.SMS_CREATE_EVENT_RESPONSE_SUCCESS_3 + participant.getSeqId()
								+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_PLEASE_CLICK
								+ SMSConstants.SMS_HEARTFULNESS_HOMEPAGE_URL
								+ SMSConstants.SMS_CREATE_PARTICIPANT_RESPONSE_SUCCESS_2;
					} else {
						response = SMSConstants.SMS_CREATE_PARTICIPANT_INVALID_FORMAT_7 + eventId
								+ SMSConstants.SMS_CREATE_PARTICIPANT_INVALID_FORMAT_6;
					}
				} else {
					LOGGER.debug("Insufficient Content");
					response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
							+ SMSConstants.SMS_HELP_FORMAT;
				}
			} else if (eventId == null) {
				LOGGER.debug("Insufficient Content");
				response = SMSConstants.SMS_MISSING_EVENT_ID + SMSConstants.SMS_EMPTY_SPACE
						+ SMSConstants.SMS_HELP_FORMAT;
			}
		}else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.srcm.heartfulness.service.SMSIntegrationService#
	 * getCountOfRegisteredParticipants(org.srcm.heartfulness.model.SMS)
	 */
	@Override
	@Transactional
	public String getCountOfRegisteredParticipants(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length == 3 ) {
			String subKeyword = contents.length >= 2 ? contents[1] : null;// Subkeyword
			if (subKeyword != null && !subKeyword.isEmpty()
					&& subKeyword.equals(SMSConstants.SMS_GET_TOTAL_REGISTERED_USERS_SUB_KEYWORD)) {
				String eventId = contents.length >= 3 ? contents[2] : null;// event
																			// Id
				Program program = new Program();
				if (eventId != null && !eventId.isEmpty()) {
					program = programRepository.findByAutoGeneratedEventId(eventId);
					if (program.getProgramId() > 0) {
						response = SMSConstants.SMS_REGISTER_PARTICIPANT_COUNT_SUCCESS_1 + eventId
								+ SMSConstants.SMS_REGISTER_PARTICIPANT_COUNT_SUCCESS_2
								+ String.valueOf(smsIntegrationRepository.getRegisteredParticipantsCount(eventId));
					} else {
						response = SMSConstants.SMS_REGISTER_PARTICIPANT_INVALID_FORMAT_1 + eventId
								+ SMSConstants.SMS_EWELCOME_RESPONSE_INVALID_FORMAT_2;
					}
				} else {
					response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
							+ SMSConstants.SMS_HELP_FORMAT;
				}
			} else {
				response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
						+ SMSConstants.SMS_HELP_FORMAT;
			}
		}else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.srcm.heartfulness.service.SMSIntegrationService#
	 * getCountOfIntroducedParticipants(org.srcm.heartfulness.model.SMS)
	 */
	@Override
	@Transactional
	public String getCountOfIntroducedParticipants(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length == 3) {
			String subKeyword = contents.length >= 2 ? contents[1] : null;// Subkeyword

			if (subKeyword != null && !subKeyword.isEmpty()
					&& subKeyword.equals(SMSConstants.SMS_GET_TOTAL_REGISTERED_USERS_BY_INTRO_ID_SUB_KEYWORD)) {
				String eventId = contents.length >= 3 ? contents[2] : null;// introId
				Program program = new Program();
				if (eventId != null && !eventId.isEmpty()) {
					program = programRepository.findByAutoGeneratedIntroId(eventId);
					if (program.getProgramId() > 0) {
						response = SMSConstants.SMS_INTRODUCED_PARTICIPANT_COUNT_SUCCESS_1 + eventId
								+ SMSConstants.SMS_REGISTER_PARTICIPANT_COUNT_SUCCESS_2
								+ String.valueOf(smsIntegrationRepository.getIntroducedParticipantsCount(eventId));
					} else {
						response = SMSConstants.SMS_EWELCOME_RESPONSE_INVALID_FORMAT_1 + eventId
								+ SMSConstants.SMS_INTRODUCE_PARTICIPANT_RESPONSE_INVALID_FORMAT_3;
					}
				} else {
					response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
							+ SMSConstants.SMS_HELP_FORMAT;
				}
			}
		}else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

	@Override
	public String updateParticipant(SMS sms) {
		String response = "";
		String contents[] = SmsUtil.parseSmsContent(sms.getMessageConetent());
		if (contents.length > 0 && contents.length==4) {
			String introId = contents.length >= 3 ? contents[2] : null;// event
			String seqNum = contents.length >= 4 ? contents[3] : null;
			if (introId != null && !introId.isEmpty()) {
				Participant participant = participantRepository.getParticipantByIntroIdAndMobileNo(introId, seqNum);
				if (participant.getId() > 0 && participant.getProgramId() > 0) {
					if(seqNum!=null && seqNum.length()==4){
						if (participant.getWelcomeCardNumber() == null) {
							participant.setWelcomeCardNumber(String.valueOf(SmsUtil.generateRandomNumber(9)));
						}
						participantRepository.save(participant);
						response = SMSConstants.SMS_EWELCOME_RESPONSE_SUCCESS_1 + participant.getWelcomeCardNumber()
								+ SMSConstants.SMS_EWELCOME_RESPONSE_SUCCESS_2;
					}else{
						response = SMSConstants.SMS_SEQUENCE_NUMBER_RESPONSE_INVALID_FORMAT_1 + seqNum
								+ SMSConstants.SMS_SEQUENCE_NUMBER_RESPONSE_INVALID_FORMAT_2;
					}
				} else {
					response = SMSConstants.SMS_INTRODUCE_PARTICIPANT_INVALID_FORMAT_1 + introId 
							+ "/" + seqNum  
							+ SMSConstants.SMS_INTRODUCE_PARTICIPANT_RESPONSE_INVALID_FORMAT_2;
				}
			}else{
				LOGGER.debug("Insufficient Content");
				response = SMSConstants.SMS_MISSING_INTRO_ID + SMSConstants.SMS_EMPTY_SPACE
						+ SMSConstants.SMS_HELP_FORMAT;
			} 
		}else {
			LOGGER.debug("Insufficient Content");
			response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
					+ SMSConstants.SMS_HELP_FORMAT;
		}
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}
	
	@Override
	public String getHelpContent(SMS sms) {
		StringBuilder helpMessage = new StringBuilder();
		helpMessage.append(SMSConstants.SMS_HELP_CREATE_EVENT + SMSConstants.SMS_KEYWORD
				+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_CREATE_EVENT_SUB_KEYWORD
				+ SMSConstants.SMS_CREATE_EVENT_RESPONSE_INVALID_FORMAT_1);
		helpMessage.append("\n");
		helpMessage.append(SMSConstants.SMS_HELP_UPDATE_EVENT + SMSConstants.SMS_KEYWORD
				+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_UPDATE_EVENT_SUB_KEYWORD
				+ SMSConstants.SMS_UPDATE_EVENT_RESPONSE_INVALID_FORMAT_1);
		helpMessage.append("\n");
		helpMessage.append(SMSConstants.SMS_HELP_REGISTER_PARTICIPANT + SMSConstants.SMS_KEYWORD
				+SMSConstants.SMS_EMPTY_SPACE+ SMSConstants.SMS_REGISTER_PARTICIPANT_SUB_KEYWORD
				+ SMSConstants.SMS_CREATE_EVENT_PARTICIANT_INVALID_RESPONSE_1);
		helpMessage.append("\n");
		helpMessage.append(SMSConstants.SMS_HELP_INTRODUCE_PARTICIPANT + SMSConstants.SMS_KEYWORD
				+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_INTRODUCE_PARTICIPANT_SUB_KEYWORD
				+ SMSConstants.SMS_CREATE_PARTICIPANT_INVALID_FORMAT_4);
		helpMessage.append("\n");
		helpMessage.append(SMSConstants.SMS_HELP_NO_OF_REGISTERED_PARTICIPANTS + SMSConstants.SMS_KEYWORD
				+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_GET_TOTAL_REGISTERED_USERS_SUB_KEYWORD
				+ SMSConstants.SMS_NO_OF_REGISTERED_PARTICIPANT_INVALID_FORMAT_4);
		helpMessage.append("\n");
		helpMessage.append(SMSConstants.SMS_HELP_NO_OF_INTRODUCED_PARTICIPANTS + SMSConstants.SMS_KEYWORD
				+ SMSConstants.SMS_EMPTY_SPACE + SMSConstants.SMS_GET_TOTAL_REGISTERED_USERS_BY_INTRO_ID_SUB_KEYWORD
				+ SMSConstants.SMS_NO_OF_INTRODUCED_PARTICIPANT_INVALID_FORMAT_4);
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), helpMessage.toString());
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return helpMessage.toString();
	}
	
	@Override
	public String handleInvalidSubkeyword(SMS sms) {
		String response = SMSConstants.SMS_RESPONSE_INVALID_FORMAT_1 + SMSConstants.SMS_EMPTY_SPACE
				+ SMSConstants.SMS_HELP_FORMAT;
		try {
			smsGatewayRestTemplate.sendSMS(sms.getSenderMobile(), response);
		} catch (HttpClientErrorException | IOException e) {
			LOGGER.debug("Exception while sending SMS {} ", e.getMessage());
		}
		return response;
	}

}
