package org.srcm.heartfulness.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.srcm.heartfulness.constants.ErrorConstants;
import org.srcm.heartfulness.model.PMPAPIAccessLog;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.SessionFiles;
import org.srcm.heartfulness.model.json.response.Response;
import org.srcm.heartfulness.repository.ProgramRepository;
import org.srcm.heartfulness.rest.template.AmazonS3Interface;
import org.srcm.heartfulness.util.DateUtils;
import org.srcm.heartfulness.util.StackTraceUtils;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;

@Service
public class AmazonS3ServiceImpl implements AmazonS3Service {

	private static final Logger LOGGER = LoggerFactory.getLogger(AmazonS3ServiceImpl.class);

	@Autowired
	AmazonS3Interface amazonS3Interface;

	@Autowired
	ProgramRepository programRepository;

	@Autowired
	APIAccessLogService apiAccessLogService;

	@Autowired
	SessionDetailsService sessionDetailsService;

	@Override
	public ResponseEntity<Response> uploadObjectInAWSAndUpdateEvent(String eventId, MultipartFile multipartFile,
			PMPAPIAccessLog accessLog) {
		Response response = null;
		try {
			Program program = programRepository.findByAutoGeneratedEventId(eventId);
			String permissionLetterPath = program.getAutoGeneratedEventId() + "/" + multipartFile.getOriginalFilename();
			amazonS3Interface.uploadObjectInAWS(multipartFile, permissionLetterPath);
			program.setCoordinatorPermissionLetterPath(permissionLetterPath);
			programRepository.saveProgram(program);
			response = new Response(ErrorConstants.STATUS_SUCCESS, "File Uploaded Successfully");
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(StackTraceUtils.convertPojoToJson(response)));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.OK);
		} catch (AmazonServiceException ase) {
			LOGGER.error("Caught an AmazonServiceException, which " + "means your request made it "
					+ "to Amazon S3, but was rejected with an error response" + " for some reason. Exception : {}", ase);
			response = new Response(ErrorConstants.STATUS_FAILED, ase.getMessage());
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ase));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.BAD_REQUEST);
		} catch (AmazonClientException ace) {
			LOGGER.error("Caught an AmazonClientException, which " + "means the client encountered "
					+ "an internal error while trying to " + "communicate with S3, "
					+ "such as not being able to access the network.Exception : {}", ace);
			response = new Response(ErrorConstants.STATUS_FAILED, ace.getMessage());
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ace));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.BAD_REQUEST);
		} catch (IOException ioe) {
			LOGGER.error("IO Exception occured while uploading file. Exception : {}", ioe);
			response = new Response(ErrorConstants.STATUS_FAILED, ioe.getMessage());
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ioe));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.BAD_REQUEST);
		}
	}

	@Override
	public ResponseEntity<Response> createPresignedURL(String eventId, String fileName, PMPAPIAccessLog accessLog) {
		Response response = null;
		try {
			Program program = programRepository.findByAutoGeneratedEventId(eventId);
			String[] filePath = program.getCoordinatorPermissionLetterPath().split("/");
			if (filePath[1].equalsIgnoreCase(fileName)) {
				String presignedURL = amazonS3Interface.generatePresignedUrl(program
						.getCoordinatorPermissionLetterPath());
				response = new Response(ErrorConstants.STATUS_SUCCESS, presignedURL);
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog
						.setResponseBody(StackTraceUtils.convertPojoToJson(StackTraceUtils.convertPojoToJson(response)));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<Response>(response, HttpStatus.OK);
			} else {
				response = new Response(ErrorConstants.STATUS_FAILED, "Invalid File Name");
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertPojoToJson("File Name mismatch"));
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				return new ResponseEntity<Response>(response, HttpStatus.NOT_ACCEPTABLE);
			}
		} catch (AmazonServiceException ase) {
			LOGGER.error("Caught an AmazonServiceException, which " + "means your request made it "
					+ "to Amazon S3, but was rejected with an error response" + " for some reason. Exception : {}", ase);
			response = new Response(ErrorConstants.STATUS_FAILED, ase.getMessage());
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ase));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.BAD_REQUEST);
		} catch (AmazonClientException ace) {
			LOGGER.error("Caught an AmazonClientException, which " + "means the client encountered "
					+ "an internal error while trying to " + "communicate with S3, "
					+ "such as not being able to access the network.Exception : {}", ace);
			response = new Response(ErrorConstants.STATUS_FAILED, ace.getMessage());
			accessLog.setStatus(ErrorConstants.STATUS_FAILED);
			accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ace));
			accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
			accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
			apiAccessLogService.updatePmpAPIAccessLog(accessLog);
			return new ResponseEntity<Response>(response, HttpStatus.BAD_REQUEST);
		}
	}

	@Override
	public ResponseEntity<List<Response>> uploadListOfObjectsInAWSForSession(String eventId, String sessionId, String fileType,
			MultipartFile[] multipartFiles, PMPAPIAccessLog accessLog) {
		List<Response> listOfResponse=new ArrayList<Response>();
		for (MultipartFile multipartFile : multipartFiles) {
			Response response = null;
			try {
				Program program = programRepository.findByAutoGeneratedEventId(eventId);
				int sessionDetailsId = sessionDetailsService.getSessionDetailsIdBySessionIdandProgramId(sessionId,
						program.getProgramId());
				String sessionFilesPath = program.getAutoGeneratedEventId() + "/" + sessionId + "/"
						+ multipartFile.getOriginalFilename();
				amazonS3Interface.uploadObjectInAWS(multipartFile, sessionFilesPath);
				SessionFiles sessionFiles = new SessionFiles(sessionDetailsId, multipartFile.getOriginalFilename(),
						sessionFilesPath, fileType, accessLog.getUsername());
				sessionDetailsService.saveSessionFiles(sessionFiles);
				response = new Response(ErrorConstants.STATUS_SUCCESS, "File Name : " + multipartFile.getOriginalFilename()
						+ " Description : File Uploaded Successfully");
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(StackTraceUtils.convertPojoToJson(response)));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				listOfResponse.add(response);
			} catch (AmazonServiceException ase) {
				LOGGER.error("Caught an AmazonServiceException, which " + "means your request made it "
						+ "to Amazon S3, but was rejected with an error response" + " for some reason. Exception : {}", ase);
				response = new Response(ErrorConstants.STATUS_FAILED, "File Name : " + multipartFile.getOriginalFilename()
						+ " Description :" + ase.getMessage());
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ase));
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				listOfResponse.add(response);
			} catch (AmazonClientException ace) {
				LOGGER.error("Caught an AmazonClientException, which " + "means the client encountered "
						+ "an internal error while trying to " + "communicate with S3, "
						+ "such as not being able to access the network.Exception : {}", ace);
				response = new Response(ErrorConstants.STATUS_FAILED, "File Name : " + multipartFile.getOriginalFilename()
						+ " Description :" + ace.getMessage());
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ace));
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				listOfResponse.add(response);
			} catch (IOException ioe) {
				LOGGER.error("IO Exception occured while uploading file. Exception : {}", ioe);
				response = new Response(ErrorConstants.STATUS_FAILED, "File Name : " + multipartFile.getOriginalFilename()
						+ " Description :" + ioe.getMessage());
				accessLog.setStatus(ErrorConstants.STATUS_FAILED);
				accessLog.setErrorMessage(StackTraceUtils.convertStackTracetoString(ioe));
				accessLog.setTotalResponseTime(DateUtils.getCurrentTimeInMilliSec());
				accessLog.setResponseBody(StackTraceUtils.convertPojoToJson(response));
				apiAccessLogService.updatePmpAPIAccessLog(accessLog);
				listOfResponse.add(response);
			}
		}
		return new ResponseEntity<List<Response>>(listOfResponse,HttpStatus.OK);
	}

}
