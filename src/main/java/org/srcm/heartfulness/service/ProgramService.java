package org.srcm.heartfulness.service;

import java.util.List;

import org.springframework.dao.DataAccessException;
import org.srcm.heartfulness.model.Coordinator;
import org.srcm.heartfulness.model.Participant;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.json.request.Event;
import org.srcm.heartfulness.model.json.request.EventAdminChangeRequest;
import org.srcm.heartfulness.model.json.request.ParticipantRequest;

public interface ProgramService {
	
	/**
	 * To create a program and persist
	 * 
	 * @param program - <code>Program</code>
	 * @return the <code>Program</code> 
	 */
	public Program createProgram(Program program);
	
	/**
	 * Check whether program exists or not
	 * 
	 * @param program - <code>Program</code>
	 * @return true or false
	 */
	public boolean isProgramExist(Program program);
	
	/**
	 * Retrieve <code>Program</code> from the data store by Auto generated event id.
	 * 
	 * @param autoGeneratedEventid - Auto generated Event ID to search for
	 * @return the <code>Program</code> if found
	 * @throws DataAccessException
	 */
	Program findByAutoGeneratedEventId(String autoGeneratedEventid) throws DataAccessException;
	
	/**
	 * gets the program details depending on the email and user role
	 * @param email
	 * @param isAdmin
	 * @return
	 */
	public List<Program> getProgramByEmail(String email,boolean isAdmin);

	/**
	 * get the program details based on programID
	 * @param id
	 * @return
	 */
	public Program getProgramById(int id);

	/**
	 * Returns the list of Participant details for the given program ID
	 * @param decryptedProgramId
	 * @return List<Participant>
	 */
	public List<Participant> getParticipantByProgramId(int decryptedProgramId);
	
	
	/**
	 * Get the list of events depending on the coordinator email
	 * @param email
	 * @param isAdmin
	 * @return List<Event>
	 */
	public List<Event> getEventListByEmail(String email,boolean isAdmin);

	
	/**
	 * Returns the list of Participant details for a given auto
	 * GeneratedEventId.
	 * @param eventId
	 * @return List<ParticipantRequest>
	 */
	public List<ParticipantRequest> getParticipantByEventId(String eventId);
	
	/**
	 * This service method is used to create a new record or update an existing record.
	 * 
	 * @param events List<Event> is sent to this service method as an argument against 
	 * which mandatory,duplicate eventId and other  validations are performed. 
	 * @return List<Event>
	 * @throws InvalidDateException if the program_start_date is in invalid format.
	 */
	public List<Event> createOrUpdateEvent(List<Event> events);
	
	/**
	 * service to get the total number of available events count based on the user email and the user role
	 * @param username
	 * @param isAdmin
	 * @return count(int)
	 */
	public int getEventCountByEmail(String username, boolean isAdmin);

	/**
	 * service to get the non categorized events count based on the user email and the user role
	 * @param coOrdinator
	 * @param isAdmin
	 * @return count(int)
	 */
	public int getNonCategorizedEventsByEmail(String coOrdinator, boolean isAdmin);

	/**
	 * service to get the participant for the given programID and seq ID
	 * @param seqId
	 * @param programId
	 * @return Participant
	 */
	public Participant findParticipantBySeqId(String seqId, int programId);
	
	/**
	 * service to the programId for the given auto generated eventID
	 * @param eventId
	 * @return programId
	 */
	public int getProgramIdByEventId(String eventId);
	
	/**
	 * service to update the participant introduced status for the given participant Ids of an given eventID
	 * @param participantIds
	 * @param eventId
	 * @param introduced
	 */
	public void UpdateParticipantsStatus(String participantIds, String eventId , String introduced);
	
	
	/**
	 * service to get the all available event categories from the database
	 * @return
	 */
	public List<String> getAllEventCategories();
	
	/**
	 * service to get the event count based on the user email and the user role and event category
	 * @param email
	 * @param isAdmin
	 * @param eventCategory
	 * @return count of events
	 */
	public int getEventCountByCategory(String email, boolean isAdmin, String eventCategory);
	
	/**
	 *  service to get the miscillaneous event count based on the user email and the user role and event eventcategories
	 * @param email
	 * @param isAdmin
	 * @param eventcategories
	 * @return
	 */
	public int getMiscellaneousEventsByEmail(String email, boolean isAdmin, List<String> eventcategories);
	
	
	/**
	 * service to update the admin for the event 
	 * @param eventAdminChangeRequest
	 */
	public void updateEventAdmin(EventAdminChangeRequest eventAdminChangeRequest);
	
	
	/**
	 * service to update the co-ordinator details in the database after changing admin for the event
	 * @param eventAdminChangeRequest
	 */
	public void updateCoOrdinatorStatistics(EventAdminChangeRequest eventAdminChangeRequest);
	
	/**
	 * service to get all the available co-ordinators list from the database
	 * @return List<Coordinator>
	 */
	public List<Coordinator> getAllCoOrdinatorsList();

	/**
	 * service to get the uncategorized event list for the given email and user role
	 * @param email
	 * @param isAdmin
	 * @return List<String>
	 */
	public List<String> getUncategorizedEvents(String email, boolean isAdmin);

	
	/**
	 * service to delete the participant for the given eventId and seqId
	 * @param seqId
	 * @param eventId
	 * @return
	 */
	public Participant deleteParticipant(String seqId, String eventId);

	/**
	 * service to update the deleted participant details to the database
	 * @param deletedParticipant
	 * @param deletedBy
	 */
	public void updateDeletedParticipant(Participant deletedParticipant, String deletedBy);
	
	/**
	 * service to get the event details for the given eventID
	 * @param EventId
	 * @return Event
	 */
	public Event getEventDetails(String EventId);

}
