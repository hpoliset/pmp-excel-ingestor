package org.srcm.heartfulness.service;

import java.util.LinkedHashMap;

import org.springframework.http.ResponseEntity;
import org.srcm.heartfulness.model.PMPAPIAccessLog;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.ProgramCoordinators;
import org.srcm.heartfulness.model.json.response.CoordinatorAccessControlResponse;
import org.srcm.heartfulness.model.json.response.UserProfile;

/**
 * 
 * @author himasreev
 *
 */
public interface CoordinatorAccessControlService {

	/**
	 * This method is used to insert Secondary coordinator details in event
	 * access request table.
	 * 
	 * @param autoGeneratedEventId
	 *            to get the program Id for a particular program.
	 * @param userEmail
	 *            email of the requested person i.e who is raising this request
	 *            to access other than his own event.
	 *            
	 * @param secondaryCoordinatorNotes Notes written by secondary coordinator
	 * for primary coordinator.           
	 * @param accessLog
	 *            to register the log details into our database.
	 * @return CoordinatorAccessControlResponse If the request is successfull,
	 *         CoordinatorAccessControlSuccessResponse is returned else
	 *         CoordinatorAccessControlErrorResponse is returned.
	 * 
	 */
	public CoordinatorAccessControlResponse addSecondaryCoordinatorRequest(String autoGeneratedEventId,String userEmail,String secondaryCoordinatorNotes, PMPAPIAccessLog accessLog);

	/**
	 * This method is used to approve the request raised by secondary
	 * coordinators to access other's event.
	 * 
	 * @param approvedBy
	 *            email of the primary coordinator or the preceptor of that
	 *            event.
	 * @param pgrmCoordinators
	 *            Details of the secondary coordinators who wants to raise a
	 *            request to access other events
	 * @param accessLog
	 *            to update the PMP API access log data.
	 * @return CoordinatorAccessControlResponse, if the request is successfull,
	 *         CoordinatorAccessControlSuccessResponse is returned else
	 *         CoordinatorAccessControlErrorResponse is returned.
	 */
	public CoordinatorAccessControlResponse approveSecondaryCoordinatorRequest(String approvedBy,
			ProgramCoordinators pgrmCoordinators, PMPAPIAccessLog accessLog);

	/**
	 * This method is used to get the list of secondary coordinators who have
	 * raised a request to access other event details.
	 * 
	 * @param programIds, LinkedHashMap with programId and auto generated event 
	 * id's for the logged in user.
	 *            
	 * @param accessLog
	 *            to update the PMP API access log data.
	 * @return ResponseEntity<List<SecondaryCoordinatorRequest>> or an empty
	 *         array list if no request is raised for the event.
	 */
	public ResponseEntity<?> getListOfSecondaryCoordinatorRequests(LinkedHashMap<Integer,String> programIds,
			PMPAPIAccessLog accessLog);

	/**
	 * This method is used to validate the coordinator email Id of the event by
	 * calling MYSRCM api/abhyasis API.
	 * 
	 * @param program
	 * @param id
	 * @return <code>String</code> with the status and remarks of the
	 *         coordinator email Id.
	 */
	public String validateCoordinatorEmailID(Program program, int id);

	/**
	 * This method is used to persist the coordinator details to the event with
	 * reference of program Id and user Id.
	 * 
	 * @param programCoordinators
	 */
	public void saveCoordinatorDetails(ProgramCoordinators programCoordinators);

	/**
	 * This method is used to validate the preceptor Id mentioned for the event,
	 * and if preceptor Id is valid creates user in HFN backend with the profile
	 * associated with the preceptor Id.
	 * 
	 * @param program
	 * @param id
	 * @param source
	 * @return  <code>String</code> with the status and remarks of the
	 *        preceptor Id.
	 */
	public String validatePreceptorIDCardNumberandCreateUser(Program program, int id, String source);

}
