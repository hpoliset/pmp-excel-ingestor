package org.srcm.heartfulness.service;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.HttpClientErrorException;
import org.srcm.heartfulness.constants.CoordinatorAccessControlConstants;
import org.srcm.heartfulness.constants.EndpointConstants;
import org.srcm.heartfulness.constants.ErrorConstants;
import org.srcm.heartfulness.constants.EventDetailsUploadConstants;
import org.srcm.heartfulness.constants.ExpressionConstants;
import org.srcm.heartfulness.constants.PMPConstants;
import org.srcm.heartfulness.enumeration.CoordinatorPosition;
import org.srcm.heartfulness.enumeration.EventSearchField;
import org.srcm.heartfulness.helper.EWelcomeIDGenerationHelper;
import org.srcm.heartfulness.mail.CoordinatorAccessControlMail;
import org.srcm.heartfulness.model.Coordinator;
import org.srcm.heartfulness.model.CoordinatorAccessControlEmail;
import org.srcm.heartfulness.model.CoordinatorEmail;
import org.srcm.heartfulness.model.EventPagination;
import org.srcm.heartfulness.model.PMPAPIAccessLog;
import org.srcm.heartfulness.model.PMPAPIAccessLogDetails;
import org.srcm.heartfulness.model.Participant;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.model.ProgramCoordinators;
import org.srcm.heartfulness.model.json.request.DashboardRequest;
import org.srcm.heartfulness.model.json.request.Event;
import org.srcm.heartfulness.model.json.request.EventAdminChangeRequest;
import org.srcm.heartfulness.model.json.request.ParticipantRequest;
import org.srcm.heartfulness.model.json.request.SearchRequest;
import org.srcm.heartfulness.model.json.response.AbhyasiResult;
import org.srcm.heartfulness.model.json.response.AbhyasiUserProfile;
import org.srcm.heartfulness.model.json.response.CitiesAPIResponse;
import org.srcm.heartfulness.model.json.response.CoordinatorPositionResponse;
import org.srcm.heartfulness.model.json.response.EWelcomeIDErrorResponse;
import org.srcm.heartfulness.model.json.response.GeoSearchResponse;
import org.srcm.heartfulness.model.json.response.PositionAPIResult;
import org.srcm.heartfulness.repository.ParticipantRepository;
import org.srcm.heartfulness.repository.ProgramRepository;
import org.srcm.heartfulness.repository.UserRepository;
import org.srcm.heartfulness.rest.template.DashboardRestTemplate;
import org.srcm.heartfulness.rest.template.SrcmRestTemplate;
import org.srcm.heartfulness.util.DateUtils;
import org.srcm.heartfulness.util.StackTraceUtils;
import org.srcm.heartfulness.validator.EventDashboardValidator;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

/**
 * @author Koustav Dutta
 *
 */

@Service
public class ProgramServiceImpl implements ProgramService {

	private static Logger LOGGER = LoggerFactory.getLogger(ProgramServiceImpl.class);

	@Autowired
	ProgramRepository programRepository;

	@Autowired
	EventDashboardValidator eventDashboardValidator;

	@Autowired
	SrcmRestTemplate srcmRestTemplate;

	@Autowired
	ParticipantRepository participantRepository;

	@Autowired
	EWelcomeIDGenerationHelper eWelcomeIDGenerationHelper;

	@Autowired
	APIAccessLogService apiAccessLogService;

	@Autowired
	PmpParticipantService participantService;

	@Autowired
	CoordinatorAccessControlService coordinatorAccessControlService;

	@Autowired
	CoordinatorAccessControlMail coordinatorAccessControlMail;

	@Autowired
	UserRepository userRepository;

	@Autowired
	DashboardRestTemplate dashboardRestTemplate;

	@Autowired
	DashboardService dashboardService;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.ProgramService#createProgram(java.lang.
	 * String)
	 */
	@Override
	@Transactional
	public Program createProgram(Program program) {
		programRepository.save(program);
		return program;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.srcm.heartfulness.service.ProgramService#isProgramExist(Program
	 * program)
	 */
	@Override
	@Transactional(readOnly = true)
	public boolean isProgramExist(Program program) {
		return programRepository.isProgramExist(program);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.ProgramService#findByAutoGeneratedEventId
	 * (java.lang.String)
	 */
	@Override
	public Program findByAutoGeneratedEventId(String autoGeneratedEventid) {

		return programRepository.findByAutoGeneratedEventId(autoGeneratedEventid);
	}

	@Override
	public Program getProgramById(int id) {
		return programRepository.getEventById(id);
	}

	@Override
	public List<Program> getProgramByEmail(String email, boolean isAdmin) {
		return programRepository.getEventsByEmail(email, isAdmin, 0, 0);
	}

	/**
	 * Retrieve <code>List<Participant></code> from the data store by ProgramId.
	 * 
	 * @param decryptedProgramId
	 * @return
	 */
	@Override
	public List<Participant> getParticipantByProgramId(int decryptedProgramId,List<String> mail,String role) {
		return programRepository.getParticipantList(decryptedProgramId,mail,role);
	}

	/**
	 * Get the list of events depending on the coordinator email
	 * 
	 * @param email
	 * @param isAdmin
	 * @return List<Event>
	 */
	@Override
	public List<Event> getEventListByEmail(String email, boolean isAdmin, int offset, int pageSize) {
		List<Event> eventList = new ArrayList<Event>();
		List<Program> programList = programRepository.getEventsByEmail(email, isAdmin, offset, pageSize);
		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Program program : programList) {
			Event event = new Event();
			event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
			event.setProgramChannel(program.getProgramChannel());
			event.setProgramName(program.getProgramName());
			if (null == program.getProgramStartDate()) {
				event.setProgramStartDate("");
			} else {
				try {
					event.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
				} catch (Exception e) {
					event.setProgramStartDate("");
				}
			}
			if (null == program.getProgramEndDate()) {
				event.setProgramEndDate("");
			} else {
				try {
					event.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
				} catch (Exception e) {
					event.setProgramEndDate("");
				}
			}
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setEventPlace(program.getEventPlace());
			event.setEventCity(program.getEventCity());
			event.setEventState(program.getEventState());
			event.setEventCountry(program.getEventCountry());
			event.setPreceptorName(program.getPreceptorName());
			event.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
			event.setRemarks(program.getRemarks());
			eventList.add(event);
		}

		return eventList;
	}

	/**
	 * Returns the list of Participant details for a given auto
	 * GeneratedEventId.
	 * 
	 * @param eventId
	 * @return List<ParticipantRequest>
	 */
	/*@Override
	public List<ParticipantRequest> getParticipantByEventId(String eventId,List<String> mail,String role) {
		List<Participant> participantList = new ArrayList<Participant>();
		List<ParticipantRequest> participantReqList = new ArrayList<ParticipantRequest>();

		int programId = programRepository.getProgramIdByEventId(eventId);
		if (programId == 0) {
			return participantReqList;
		} else {
			SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
			participantList = programRepository.getParticipantList(programId,mail,role);

			for (Participant participant : participantList) {
				ParticipantRequest participantReq = new ParticipantRequest();
				participantReq.setSeqId(participant.getSeqId());
				participantReq.setEventId(eventId);
				participantReq.setPrintName(participant.getPrintName());
				participantReq.setEmail(participant.getEmail());
				participantReq.setMobilePhone(participant.getMobilePhone());
				if (null == participant.getIntroductionDate()) {
					participantReq.setIntroductionDate("");
				} else {
					try {
						participantReq.setIntroductionDate(convertedsdf.format(participant.getIntroductionDate()));
					} catch (Exception e) {
						participantReq.setIntroductionDate("");
					}
				}
				if (null == participant.getGender()) {
					participantReq.setGender("");
				} else if (PMPConstants.GENDER_MALE.equals(participant.getGender())) {
					participantReq.setGender(PMPConstants.MALE);
				} else if (PMPConstants.GENDER_FEMALE.equals(participant.getGender())) {
					participantReq.setGender(PMPConstants.FEMALE);
				} else {
					participantReq.setGender("");
				}

				if (null == participant.getDateOfBirth()) {
					participantReq.setDateOfBirth("");
				} else {
					try {
						participantReq.setDateOfBirth(convertedsdf.format(participant.getDateOfBirth()));
					} catch (Exception e) {
						participantReq.setDateOfBirth("");
					}
				}

				if (null == participant.getFirstSittingDate()) {
					participantReq.setFirstSittingDate("");
				} else {
					try {
						participantReq.setFirstSittingDate(convertedsdf.format(participant.getFirstSittingDate()));
					} catch (Exception e) {
						participantReq.setFirstSittingDate("");
					}
				}
				if (null == participant.getSecondSittingDate()) {
					participantReq.setSecondSittingDate("");
				} else {
					try {
						participantReq.setSecondSittingDate(convertedsdf.format(participant.getSecondSittingDate()));
					} catch (Exception e) {
						participantReq.setSecondSittingDate("");
					}
				}
				if (null == participant.getThirdSittingDate()) {
					participantReq.setThirdSittingDate("");
				} else {
					try {
						participantReq.setThirdSittingDate(convertedsdf.format(participant.getThirdSittingDate()));
					} catch (Exception e) {
						participantReq.setThirdSittingDate("");
					}
				}
				participantReq.setFirstSitting((null != participant.getFirstSitting() && 1 == participant
						.getFirstSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
				participantReq.setSecondSitting((null != participant.getSecondSitting() && 1 == participant
						.getSecondSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
				participantReq.setThirdSitting((null != participant.getThirdSitting() && 1 == participant
						.getThirdSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
				participantReq.setAddressLine1(participant.getAddressLine1());
				participantReq.setAddressLine2(participant.getAddressLine2());
				participantReq.setCity(participant.getCity());
				participantReq.setState(participant.getState());
				participantReq.setCountry(participant.getCountry());
				participantReq.setAbhyasiId(participant.getAbhyasiId());
				participantReq.setIntroducedBy(participant.getIntroducedBy());
				participantReq.setIntroducedStatus(1 == participant.getIntroduced() ? PMPConstants.REQUIRED_YES
						: PMPConstants.REQUIRED_NO);
				participantReq.seteWelcomeID((null != participant.getWelcomeCardNumber() && !participant
						.getWelcomeCardNumber().isEmpty()) ? participant.getWelcomeCardNumber() : null);
				participantReq.setEwelcomeIdRemarks(participant.getEwelcomeIdRemarks());
				participantReq.setPhone(participant.getPhone());
				participantReq.setDistrict(participant.getDistrict());
				participantReq.setAgeGroup(participant.getAgeGroup());
				participantReqList.add(participantReq);
			}
			return participantReqList;
		}
	}*/

	/**
	 * Returns the list of Participant details for a given auto
	 * GeneratedEventId.
	 * 
	 * @param eventId
	 * @return List<ParticipantRequest>
	 */
	@Override
	public List<ParticipantRequest> getParticipantByEventId(String eventId,List<String> mail,String role, String authToken, PMPAPIAccessLog accessLog) {
		LOGGER.info("Trying to get participant list for log in user {}",accessLog.getUsername());

		boolean isNext = true;
		int currentPositionValue = 0;
		String currentPositionType =  "";
		List<Participant> participantList = new ArrayList<Participant>();
		List<ParticipantRequest> participantReqList = new ArrayList<ParticipantRequest>();
		int programId = 0;
		PositionAPIResult posResult = null;
		
		PMPAPIAccessLogDetails accessLogDetails = new 
				PMPAPIAccessLogDetails(accessLog.getId(), EndpointConstants.POSITIONS_API, 
						DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null, authToken);
		apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);	

		try {

			posResult = dashboardRestTemplate.findCoordinatorPosition(authToken);

			while(isNext){

				for(CoordinatorPositionResponse crdntrPosition : posResult.getCoordinatorPosition()){

					if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

						currentPositionValue = CoordinatorPosition.COUNTRY_COORDINATOR.getPositionValue();
						currentPositionType =  crdntrPosition.getPositionType().getName();
					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.ZONE_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.ZONE_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.CENTER_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.CENTER_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}
					}

					if(crdntrPosition.isActive() && currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){
						posResult.setNext(null);
						break;
					}

				}

				if(null == posResult.getNext()){
					isNext = false;
				}else{
					posResult =  dashboardRestTemplate.findCoordinatorPosition(authToken,posResult.getNext());
				}
			}

		} catch (JsonParseException jpe) {
			LOGGER.error("JPE : Unable to fetch coordinator position type from MYSRCM {}",jpe.getMessage());
		} catch (JsonMappingException jme) {
			LOGGER.error("JME : Unable to fetch coordinator position type from MYSRCM {}",jme.getMessage());
		} catch (IOException ioe) {
			LOGGER.error("IOE : Unable to fetch coordinator position type from MYSRCM {}",ioe.getMessage());
		} catch(Exception ex){
			LOGGER.error("EX : Unable to fetch coordinator position type from MYSRCM {}",ex.getMessage());
		}

		accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
		accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(posResult));
		apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);

		programId = programRepository.getProgramIdByEventId(eventId);
		if (programId == 0) {
			return participantReqList;
		} else {
			if (currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType()) 
					|| currentPositionType.equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType()) 
					|| currentPositionType.equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType())) {

				LOGGER.info("Logged in user {} is a country/zone/center coordinator ", accessLog.getUsername());
				return participantReqList;
			} else {
				participantList = programRepository.getParticipantList(programId, mail, role);
				return getParticipantList(eventId, participantList);
			}
		}

	}

	/**
	 * This service method is used to create a new record or update an existing
	 * record.
	 * 
	 * @param events
	 *            List<Event> is sent to this service method as an argument
	 *            against which mandatory,duplicate eventId and other
	 *            validations are performed.
	 * @return List<Event>
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 * @throws HttpClientErrorException
	 * @throws InvalidDateException
	 *             if the program_start_date is in invalid format.
	 */
	/*@Override
	public List<Event> createOrUpdateEvent(List<Event> events, int id) throws HttpClientErrorException,
			JsonParseException, JsonMappingException, IOException, ParseException {
		SimpleDateFormat initialsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Event event : events) {

			Map<String, String> errors = new HashMap<String, String>();

			errors = eventDashboardValidator.checkMandatoryEventFields(event);
			if (!errors.isEmpty()) {
				event.setErrors(errors);
				event.setStatus(ErrorConstants.STATUS_FAILED);
			} else {
				PMPAPIAccessLogDetails accessLogDetails = null;
				Program program = programRepository
						.findByAutoGeneratedEventId(null != event.getAutoGeneratedEventId() ? event
								.getAutoGeneratedEventId() : null); // new
				// Program();
				String preceptorIdValidationResponse = null;
				String existingCoordinatorEmailId = program.getCoordinatorEmail();
				boolean preceptorIDModified = false;
				program.setProgramChannel(event.getProgramChannel());
				try {
					program.setProgramStartDate(initialsdf.parse(event.getProgramStartDate()));
				} catch (ParseException e) {
					errors.put("programStartDate", "Error while parsing Program Start Date");
					event.setErrors(errors);
				}

				if (null == event.getProgramEndDate()) {
					program.setProgramEndDate(null);
				} else if (event.getProgramEndDate().isEmpty()) {
					program.setProgramEndDate(null);
				} else {
					try {
						program.setProgramEndDate(initialsdf.parse(event.getProgramEndDate()));
					} catch (ParseException e) {
						errors.put("programEndDate", "Error while parsing Program End Date");
						event.setErrors(errors);
					}
				}
				program.setAutoGeneratedEventId(null != event.getAutoGeneratedEventId() ? event
						.getAutoGeneratedEventId() : null);
				program.setProgramName(event.getProgramName());
				program.setCoordinatorName(event.getCoordinatorName());
				program.setCoordinatorEmail(event.getCoordinatorEmail());
				program.setCoordinatorMobile(event.getCoordinatorMobile());
				program.setEventPlace(event.getEventPlace());
				program.setEventCity(event.getEventCity());
				program.setEventState(event.getEventState());
				program.setEventCountry(event.getEventCountry());
				program.setOrganizationDepartment(event.getOrganizationDepartment());
				program.setOrganizationName(event.getOrganizationName());
				program.setOrganizationWebSite(event.getOrganizationWebSite());
				program.setOrganizationContactName(event.getOrganizationContactName());
				program.setOrganizationContactEmail(event.getOrganizationContactEmail());
				program.setOrganizationContactMobile(event.getOrganizationContactMobile());
				program.setPreceptorIdCardNumber(event.getPreceptorIdCardNumber());
				if (null != event.getAutoGeneratedEventId() && !event.getAutoGeneratedEventId().isEmpty()) {
					if (null != event.getPreceptorIdCardNumber() && !event.getPreceptorIdCardNumber().isEmpty()) {
						accessLogDetails = new PMPAPIAccessLogDetails(id, EndpointConstants.ABHYASI_INFO_URI,
								DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,
								StackTraceUtils.convertPojoToJson(event.getPreceptorIdCardNumber()));
						int accessdetailsID = apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);
						preceptorIDModified = true;
						preceptorIdValidationResponse = validatePreceptorIDcardNumber(program, event, accessdetailsID);
						if (null != preceptorIdValidationResponse) {
							errors.put("PreceptorId Card Number", preceptorIdValidationResponse);
							event.setErrors(errors);
						} else {
							event.setPreceptorName(program.getPreceptorName());
						}
					}
				} else {
					accessLogDetails = new PMPAPIAccessLogDetails(id, EndpointConstants.ABHYASI_INFO_URI,
							DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,
							StackTraceUtils.convertPojoToJson(event.getPreceptorIdCardNumber()));
					int accessdetailsID = apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);
					preceptorIdValidationResponse = validatePreceptorIDcardNumber(program, event, accessdetailsID);
					if (null != preceptorIdValidationResponse) {
						errors.put("PreceptorId Card Number", preceptorIdValidationResponse);
						event.setErrors(errors);
					} else {
						event.setPreceptorName(program.getPreceptorName());
					}
				}
				program.setWelcomeCardSignedByName(event.getWelcomeCardSignedByName());
				program.setWelcomeCardSignerIdCardNumber(event.getWelcomeCardSignerIdCardNumber());
				program.setRemarks(event.getRemarks());
				if (null == event.getIsEwelcomeIdGenerationDisabled()
						|| event.getIsEwelcomeIdGenerationDisabled().trim().isEmpty()) {
					program.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
					event.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
				} else if (event.getIsEwelcomeIdGenerationDisabled().trim()
						.equals(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE)) {
					program.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE);
					event.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE);
				} else {
					program.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
					event.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
				}

				if (errors.isEmpty()) {
					Program persistedPgrm = programRepository.saveProgram(program);
					// coordinator validation
					if (!persistedPgrm.getCoordinatorEmail().equalsIgnoreCase(existingCoordinatorEmailId)) {

						// String isCoordinatorEmailIdvalid =
						coordinatorAccessControlService.validateCoordinatorEmailID(program, id);
						// persist coordinator details
						ProgramCoordinators programCoordinators = new ProgramCoordinators(program.getProgramId(), 0,
								program.getCoordinatorName(), program.getCoordinatorEmail(), 1);
						coordinatorAccessControlService.saveCoordinatorDetails(programCoordinators);
						CoordinatorAccessControlEmail accessControlEmail = new CoordinatorAccessControlEmail();
						accessControlEmail.setCoordinatorEmail(persistedPgrm.getCoordinatorEmail());
						accessControlEmail.setCoordinatorName(persistedPgrm.getCoordinatorName());
						accessControlEmail.setEventID(persistedPgrm.getAutoGeneratedEventId());
						accessControlEmail.setEventName(persistedPgrm.getProgramChannel());
						accessControlEmail.setProgramId(String.valueOf(persistedPgrm.getProgramId()));
						accessControlEmail.setEventPlace(persistedPgrm.getEventPlace());
						SimpleDateFormat inputsdf = new SimpleDateFormat(ExpressionConstants.SQL_DATE_FORMAT);
						accessControlEmail.setProgramCreateDate(inputsdf.format(persistedPgrm.getProgramStartDate()));
						coordinatorAccessControlMail.sendMailToCoordinatorWithLinktoCreateProfile(accessControlEmail);
					}
					if (preceptorIDModified & null != preceptorIdValidationResponse) {
						participantService.updateParticipantEWelcomeIDStatuswithProgramID(persistedPgrm.getProgramId(),
								PMPConstants.EWELCOMEID_FAILED_STATE, preceptorIdValidationResponse);
					} else if (preceptorIDModified & null == preceptorIdValidationResponse) {
						participantService.updateParticipantEWelcomeIDStatuswithProgramID(persistedPgrm.getProgramId(),
								PMPConstants.EWELCOMEID_TO_BE_CREATED_STATE, null);
					}
					event.setAutoGeneratedEventId(persistedPgrm.getAutoGeneratedEventId());
					event.setStatus(ErrorConstants.STATUS_SUCCESS);
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
				} else {
					event.setStatus(ErrorConstants.STATUS_FAILED);
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
						accessLogDetails.setResponseBody(errors.toString());
						accessLogDetails.setErrorMessage(errors.toString());
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
				}
			}
		}

		return events;

	}*/

	/*private String validatePreceptorIDcardNumber(Program program, Event event, int accessdetailsID)
			throws HttpClientErrorException, JsonParseException, JsonMappingException, IOException {
		AbhyasiResult result = srcmRestTemplate.getAbyasiProfile(event.getPreceptorIdCardNumber());
		if (result.getUserProfile().length > 0) {
			AbhyasiUserProfile userProfile = result.getUserProfile()[0];
			if (null != userProfile) {
				// if (true == userProfile.isIs_prefect() && 0 !=
				// userProfile.getId()) {
				program.setAbyasiRefNo(event.getPreceptorIdCardNumber());
				program.setFirstSittingBy(userProfile.getId());
				program.setPreceptorIdCardNumber(event.getPreceptorIdCardNumber());
				program.setPreceptorName(userProfile.getName());
				return null;

	 * } else { return
	 * "Specified PreceptorId Card Number is not authorized."; }

			} else {
				return "Invalid PreceptorId Card Number.";
			}
		} else {
			return "Invalid PreceptorId Card Number.";
		}

	}*/

	/**
	 * Service to get the total number of available events count based on the
	 * user email and the user role.
	 * 
	 * @param username
	 * @param isAdmin
	 * @return count(int)
	 */
	@Override
	public int getEventCountByEmail(String username, boolean isAdmin) {
		return programRepository.getEventCountByEmail(username, isAdmin);
	}

	/**
	 * Service to get the non categorized events count based on the user email
	 * and the user role.
	 * 
	 * @param coOrdinator
	 * @param isAdmin
	 * @return count(int)
	 */
	@Override
	public int getNonCategorizedEventsByEmail(String username, boolean isAdmin) {
		return programRepository.getNonCategorizedEventsByEmail(username, isAdmin);
	}

	/**
	 * Service to get the participant for the given programID and seq ID.
	 * 
	 * @param seqId
	 * @param programId
	 * @return Participant
	 */
	@Override
	public Participant findParticipantBySeqId(String seqId, int programId) {
		return programRepository.findParticipantBySeqId(seqId, programId);
	}

	/**
	 * Service to the programId for the given auto generated eventID.
	 * 
	 * @param eventId
	 * @return programId
	 */
	@Override
	public int getProgramIdByEventId(String eventID) {
		return programRepository.getProgramIdByEventId(eventID);
	}

	/**
	 * Service to update the participant introduced status for the given
	 * participant Ids of an given eventID.
	 * 
	 * @param participantIds
	 * @param eventId
	 * @param introduced
	 */
	@Override
	public void updateParticipantsStatus(String participantIds, String eventId, String introduced, String userEmailID) {
		programRepository.updateParticipantsStatus(participantIds, eventId, introduced, userEmailID);
	}

	/**
	 * Service to get the all available event categories from the database.
	 * 
	 * @return
	 */
	@Override
	public List<String> getAllEventCategories() {
		return programRepository.getAllEventCategories();
	}

	/**
	 * Service to get the event count based on the user email and the user role
	 * and event category.
	 * 
	 * @param email
	 * @param isAdmin
	 * @param eventCategory
	 * @return count of events
	 */
	@Override
	public int getEventCountByCategory(String email, boolean isAdmin, String eventCategory) {
		return programRepository.getEventCountByCategory(email, isAdmin, eventCategory);
	}

	/**
	 * Service to get the miscellaneous event count based on the user email and
	 * the user role and event categories.
	 * 
	 * @param email
	 * @param isAdmin
	 * @param eventcategories
	 * @return
	 */
	@Override
	public int getMiscellaneousEventsByEmail(String email, boolean isAdmin, List<String> eventcategories) {
		return programRepository.getMiscellaneousEventsByEmail(email, isAdmin, eventcategories);
	}

	/**
	 * Service to update the admin for the event.
	 * 
	 * @param eventAdminChangeRequest
	 */
	@Override
	public void updateEventAdmin(EventAdminChangeRequest eventAdminChangeRequest) {
		Program program = programRepository.findByAutoGeneratedEventId(eventAdminChangeRequest.getEventId());
		eventAdminChangeRequest.setOldCoordinatorEmail(program.getCoordinatorEmail());
		program.setCoordinatorEmail(eventAdminChangeRequest.getNewCoordinatorEmail());
		program.setCoordinatorMobile(eventAdminChangeRequest.getCoordinatorMobile());
		program.setCoordinatorName(eventAdminChangeRequest.getCoordinatorName());
		programRepository.save(program);
	}

	/**
	 * Service to update the co-ordinator details in the database after changing
	 * admin for the event.
	 * 
	 * @param eventAdminChangeRequest
	 */
	@Override
	public void updateCoOrdinatorStatistics(EventAdminChangeRequest eventAdminChangeRequest) {
		programRepository.updateCoordinatorStatistics(eventAdminChangeRequest);
	}

	/**
	 * Service to get all the available co-ordinators list from the database.
	 * 
	 * @return List<Coordinator>
	 */
	@Override
	public List<Coordinator> getAllCoOrdinatorsList() {
		return programRepository.getAllCoOrdinatorsList();
	}

	/**
	 * Service to get the uncategorized event list for the given email and user
	 * role.
	 * 
	 * @param email
	 * @param isAdmin
	 * @return
	 */
	@Override
	public List<String> getUncategorizedEvents(String username, boolean isAdmin) {
		return programRepository.getNonCategorizedEventListByEmail(username, isAdmin);
	}

	/**
	 * Service to delete the participant for the given eventId and seqId.
	 * 
	 * @param seqId
	 * @param eventId
	 * @return
	 */
	@Override
	public Participant deleteParticipant(String seqId, String eventId) {
		return programRepository.deleteParticipant(seqId, eventId);
	}

	/**
	 * Service to update the deleted participant details to the database.
	 * 
	 * @param deletedParticipant
	 * @param deletedBy
	 */
	@Override
	public void updateDeletedParticipant(Participant deletedParticipant, String deletedBy) {
		programRepository.updateDeletedParticipant(deletedParticipant, deletedBy);
	}

	/**
	 * Service method to get the event details for the given eventID.
	 * 
	 * @param EventId
	 * @return Event
	 */
	@Override
	public Event getEventDetails(List<String> emailList, String userRole, String agEventId) {
		Event eventDetails = new Event();
		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);	
		Program program = programRepository.getProgramByEmailAndRole(emailList, userRole, agEventId);

		eventDetails.setProgramChannel(program.getProgramChannel());
		eventDetails.setProgramName(program.getProgramName());
		if (null == program.getProgramStartDate()) {
			eventDetails.setProgramStartDate("");
		} else {
			try {
				eventDetails.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
			} catch (Exception e) {
				eventDetails.setProgramStartDate("");
			}
		}
		if (null == program.getProgramEndDate()) {
			eventDetails.setProgramEndDate("");
		} else {
			try {

				eventDetails.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
			} catch (Exception e) {
				eventDetails.setProgramEndDate("");
			}
		}
		eventDetails.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
		eventDetails.setProgramCenter(program.getProgramCenter());
		eventDetails.setProgramZone(program.getProgramZone());
		eventDetails.setCoordinatorName(program.getCoordinatorName());
		eventDetails.setCoordinatorMobile(program.getCoordinatorMobile());
		eventDetails.setCoordinatorEmail(program.getCoordinatorEmail());
		eventDetails.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
		eventDetails.setCoordinatorPermissionLetterPath(program.getCoordinatorPermissionLetterPath());
		eventDetails.setEventPlace(program.getEventPlace());
		eventDetails.setEventCity(program.getEventCity());
		eventDetails.setEventState(program.getEventState());
		eventDetails.setEventCountry(program.getEventCountry());
		eventDetails.setOrganizationName(program.getOrganizationName());
		eventDetails.setOrganizationWebSite(program.getOrganizationWebSite());
		eventDetails.setOrganizationBatchNo(program.getOrganizationBatchNo());
		eventDetails.setOrganizationCity(program.getOrganizationCity());
		eventDetails.setOrganizationLocation(program.getOrganizationLocation());
		eventDetails.setOrganizationFullAddress(program.getOrganizationFullAddress());
		eventDetails.setOrganizationDepartment(program.getOrganizationDepartment());
		eventDetails.setOrganizationContactName(program.getOrganizationContactName());
		eventDetails.setOrganizationContactMobile(program.getOrganizationContactMobile());
		eventDetails.setOrganizationContactEmail(program.getOrganizationContactEmail());
		eventDetails.setOrganizationDecisionMakerName(program.getOrganizationDecisionMakerName());
		eventDetails.setOrganizationDecisionMakerEmail(program.getOrganizationDecisionMakerEmail());
		eventDetails.setOrganizationDecisionMakerPhoneNo(program.getOrganizationDecisionMakerPhoneNo());
		eventDetails.setPreceptorName(program.getPreceptorName());
		eventDetails.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
		eventDetails.setWelcomeCardSignedByName(program.getWelcomeCardSignedByName());
		eventDetails.setWelcomeCardSignerIdCardNumber(program.getWelcomeCardSignerIdCardNumber());
		eventDetails.setRemarks(program.getRemarks());
		eventDetails.setIsEwelcomeIdGenerationDisabled(program.getIsEwelcomeIdGenerationDisabled());
		eventDetails.setIsReadOnly(program.getIsReadOnly());
		eventDetails.setJiraIssueNumber(program.getJiraIssueNumber());
		eventDetails.setBatchDescription(program.getBatchDescription());
		eventDetails.setProgramChannelType(program.getProgramChannelType());
		eventDetails.setProgramAddress(program.getProgramAddress());
		eventDetails.setProgramDistrict(program.getProgramDistrict());
		eventDetails.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
		eventDetails.setProgramStatus(program.getProgramStatus());
		return eventDetails;
	}

	/**
	 * Retrieve <code>Auto generated eventId</code> from the data store by
	 * programId.
	 * 
	 * @param programId
	 * @return
	 */
	@Override
	public String getEventIdByProgramID(int programId) {
		return programRepository.getEventIdByProgramID(programId);
	}

	/**
	 * Retrieve <code>e-Welcome ID</code> generated in MySRCM and persist in
	 * data store for the given eventID and seqID.
	 * 
	 * @param seqID
	 * @param eventId
	 * @return
	 * @throws HttpClientErrorException
	 * @throws JsonParseException
	 * @throws JsonMappingException
	 * @throws IOException
	 * @throws ParseException
	 */
	@Override
	@SuppressWarnings("unused")
	public String generateeWelcomeID(Participant participant, int id) {
		if (participant.getId() > 0 && participant.getProgramId() > 0) {
			if (participant.getSeqId() != null && participant.getSeqId().length() == 4) {
				if (participant.getWelcomeCardNumber() == null || participant.getWelcomeCardNumber().isEmpty()
						|| !participant.getWelcomeCardNumber().matches(ExpressionConstants.EWELCOME_ID_REGEX)) {
					if (0 == participant.getProgram().getFirstSittingBy()) {
						return "Please check your preceptor ID and update event(First Sitting by value is empty)";
					}
					// check whether participant already got ewelcomeID or not
					String partcipantEwelcomeID = fetchParticipantEwelcomeID(participant, id);
					if (null != partcipantEwelcomeID) {
						return partcipantEwelcomeID;
					} else {
						Object objResponse = eWelcomeIDGenerationHelper.getGeoSearchResponse(participant, id);
						if (objResponse instanceof GeoSearchResponse) {
							GeoSearchResponse geoSearchResponse = (GeoSearchResponse) objResponse;
							if (null != geoSearchResponse) {
								Object citiesObj = eWelcomeIDGenerationHelper.getCitiesAPIResponse(geoSearchResponse,
										id, participant);
								if (citiesObj instanceof CitiesAPIResponse) {
									CitiesAPIResponse citiesAPIResponse = (CitiesAPIResponse) citiesObj;
									if (null != citiesAPIResponse) {
										Object aspirantobj = eWelcomeIDGenerationHelper.generateEWelcomeId(participant,
												id, geoSearchResponse, citiesAPIResponse);
										if (aspirantobj instanceof String) {
											String eWelcomeID = (String) aspirantobj;
											if (null != eWelcomeID) {
												participant.getProgram().setSrcmGroup(
														String.valueOf(geoSearchResponse.getNearestCenter()));
												participant.setWelcomeCardNumber(eWelcomeID);
												participant.setWelcomeCardDate(new Date());
												participant.setIsEwelcomeIdInformed(0);
												participant.setIntroduced(1);
												participant.setEwelcomeIdRemarks(null);
												participant.setIntroducedBy(participant.getProgram()
														.getCoordinatorEmail());
												participant.setEwelcomeIdState(PMPConstants.EWELCOMEID_COMPLETED_STATE);
												participant.setIntroductionDate(null != participant.getIntroductionDate() ? participant.getIntroductionDate() : null != participant.getFirstSittingDate()?participant.getFirstSittingDate():participant.getProgram().getProgramStartDate());
												participant.setIntroduced(1);
												participantRepository.updateParticipantEwelcomeIDDetails(participant);
												return "success";
											} else {
												return "Error While generating eWelcomeID";
											}
										} else if (aspirantobj instanceof EWelcomeIDErrorResponse) {
											EWelcomeIDErrorResponse eWelcomeIDErrorResponse = (EWelcomeIDErrorResponse) aspirantobj;
											if ((null != eWelcomeIDErrorResponse.getEmail() && !eWelcomeIDErrorResponse
													.getEmail().isEmpty())) {
												return eWelcomeIDErrorResponse.getEmail().get(0);
											}
											if ((null != eWelcomeIDErrorResponse.getValidation() && !eWelcomeIDErrorResponse
													.getValidation().isEmpty())) {
												return eWelcomeIDErrorResponse.getValidation().get(0);
											}
											if ((null != eWelcomeIDErrorResponse.getError() && !eWelcomeIDErrorResponse
													.getError().isEmpty())) {
												return eWelcomeIDErrorResponse.getError();
											}
											if ((null != eWelcomeIDErrorResponse.getMobile() && !eWelcomeIDErrorResponse
													.getMobile().isEmpty())) {
												return eWelcomeIDErrorResponse.getMobile().get(0);
											}
											return "Error While parsing error response from MySRCM";
										} else {
											return "Error While generating eWelcomeID";
										}
									} else {
										return "Error While fetching cities api response";
									}
								} else if (citiesObj instanceof EWelcomeIDErrorResponse) {
									EWelcomeIDErrorResponse eWelcomeIDErrorResponse = (EWelcomeIDErrorResponse) citiesObj;
									if ((null != eWelcomeIDErrorResponse.getEmail() && !eWelcomeIDErrorResponse
											.getEmail().isEmpty())) {
										return eWelcomeIDErrorResponse.getEmail().get(0);
									}
									if ((null != eWelcomeIDErrorResponse.getValidation() && !eWelcomeIDErrorResponse
											.getValidation().isEmpty())) {
										return eWelcomeIDErrorResponse.getValidation().get(0);
									}
									if ((null != eWelcomeIDErrorResponse.getError() && !eWelcomeIDErrorResponse
											.getError().isEmpty())) {
										return eWelcomeIDErrorResponse.getError();
									}
									if ((null != eWelcomeIDErrorResponse.getMobile() && !eWelcomeIDErrorResponse
											.getMobile().isEmpty())) {
										return eWelcomeIDErrorResponse.getMobile().get(0);
									}
									return "Error While parsing error response from MySRCM";
								} else {
									return "Error While fetching cities api response";
								}
							} else {
								return "Error While fetching geosearch response";
							}
						} else if (objResponse instanceof EWelcomeIDErrorResponse) {
							EWelcomeIDErrorResponse eWelcomeIDErrorResponse = (EWelcomeIDErrorResponse) objResponse;
							if ((null != eWelcomeIDErrorResponse.getEmail() && !eWelcomeIDErrorResponse.getEmail()
									.isEmpty())) {
								return eWelcomeIDErrorResponse.getEmail().get(0);
							}
							if ((null != eWelcomeIDErrorResponse.getValidation() && !eWelcomeIDErrorResponse
									.getValidation().isEmpty())) {
								return eWelcomeIDErrorResponse.getValidation().get(0);
							}
							if ((null != eWelcomeIDErrorResponse.getError() && !eWelcomeIDErrorResponse.getError()
									.isEmpty())) {
								return eWelcomeIDErrorResponse.getError();
							}
							if ((null != eWelcomeIDErrorResponse.getMobile() && !eWelcomeIDErrorResponse.getMobile()
									.isEmpty())) {
								return eWelcomeIDErrorResponse.getMobile().get(0);
							}
							return "Error While parsing error response from MySRCM";
						} else if (objResponse instanceof String) {
							if (null != objResponse) {
								return (String) objResponse;
							} else {
								return "Error While fetching geosearch response";
							}
						} else {
							return "Error While fetching geosearch response";
						}
					}
				} else {
					return "success";
				}
			} else {
				return "Invalid SeqID";
			}
		} else {
			return "Invalid SeqID/eventID";
		}
	}

	private String fetchParticipantEwelcomeID(Participant participant, int id) {
		PMPAPIAccessLogDetails fetchEwelcomeIDAPIAccessLogDetails = null;
		if (null != participant.getEmail() && !participant.getEmail().isEmpty()) {
			try {
				fetchEwelcomeIDAPIAccessLogDetails = new PMPAPIAccessLogDetails(id, EndpointConstants.ABHYASI_INFO_URI
						+ "?email_exact=" + participant.getEmail(), DateUtils.getCurrentTimeInMilliSec(), null,
						ErrorConstants.STATUS_FAILED, null,
						StackTraceUtils.convertPojoToJson("Request: Participant Email:" + participant.getEmail()
						+ ", Participant Name:" + participant.getPrintName()));
				apiAccessLogService.createPmpAPIAccesslogDetails(fetchEwelcomeIDAPIAccessLogDetails);
				AbhyasiResult abhyasiResult = srcmRestTemplate.fetchParticipantEWelcomeID(participant.getEmail());
				fetchEwelcomeIDAPIAccessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
				fetchEwelcomeIDAPIAccessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(abhyasiResult));
				fetchEwelcomeIDAPIAccessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
				apiAccessLogService.updatePmpAPIAccesslogDetails(fetchEwelcomeIDAPIAccessLogDetails);
				if (abhyasiResult.getUserProfile().length > 0) {
					AbhyasiUserProfile userProfile = abhyasiResult.getUserProfile()[0];
					if (null != userProfile) {
						String refNo = userProfile.getRef();
						if (refNo.matches(ExpressionConstants.PARTICIPANT_EWELCOME_ID_REGEX)) {
							if (userProfile.getName().equalsIgnoreCase(participant.getPrintName().trim())) {
								participant.setIntroducedBy(participant.getProgram().getCoordinatorEmail());
								participant.setWelcomeCardNumber(refNo);
								participant.setWelcomeCardDate(new Date());
								participant.setIsEwelcomeIdInformed(0);
								participant.setIntroduced(1);
								participant.setEwelcomeIdRemarks(null);
								participant.setEwelcomeIdState(PMPConstants.EWELCOMEID_COMPLETED_STATE);
								participantRepository.updateParticipantEwelcomeIDDetails(participant);
								return "success";
							} else {
								return "Email already in use with participant name "
										+ ((null != userProfile.getName() || !userProfile.getName().isEmpty()) ? ": "
												+ userProfile.getName() : " as empty.");
							}
						} else {
							LOGGER.info(
									"particpant ref No. from MYSRCM doesn't match with H*** or B*** ids : Participant Name : {}, Name from MYSRCM : {}, Ref NO: {}  ",
									participant.getPrintName(), userProfile.getName(), userProfile.getRef());
						}
					}
				}
			} catch (HttpClientErrorException e) {
				LOGGER.error(
						"HTTP CLIENT ERROR : Error While fetching already generated ewelcomeId of the participant. NAME: {}, EMAIL: {}, EXCEPTION: {} ",
						participant.getPrintName(), participant.getEmail(), e.getMessage());
				try {
					fetchEwelcomeIDAPIAccessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
					fetchEwelcomeIDAPIAccessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
					fetchEwelcomeIDAPIAccessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
					apiAccessLogService.updatePmpAPIAccesslogDetails(fetchEwelcomeIDAPIAccessLogDetails);
				} catch (Exception ex) {
					LOGGER.error("Exception while inserting PMP API log details in table : {} ",
							StackTraceUtils.convertPojoToJson(ex));
				}
				return e.getResponseBodyAsString();
			} catch (JsonParseException | JsonMappingException e) {
				LOGGER.error(
						"JSONPARSE/JSONMAPPING ERROR : Error While fetching already generated ewelcomeId of the participant. NAME: {}, EMAIL: {}, EXCEPTION: {} ",
						participant.getPrintName(), participant.getEmail(), e.getMessage());
				try {
					fetchEwelcomeIDAPIAccessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
					fetchEwelcomeIDAPIAccessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
					fetchEwelcomeIDAPIAccessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
					apiAccessLogService.updatePmpAPIAccesslogDetails(fetchEwelcomeIDAPIAccessLogDetails);
				} catch (Exception ex) {
					LOGGER.error("Exception while inserting PMP API log details in table : {} ",
							StackTraceUtils.convertPojoToJson(ex));
				}
				return "Parsing error while fetching already generated ewelcomeId of the participant";
			} catch (Exception e) {
				LOGGER.error(
						"Exception : Error While fetching already generated ewelcomeId of the participant. NAME: {}, EMAIL: {}, EXCEPTION: {} ",
						participant.getPrintName(), participant.getEmail(), e.getMessage());
				try {
					fetchEwelcomeIDAPIAccessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
					fetchEwelcomeIDAPIAccessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
					fetchEwelcomeIDAPIAccessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
					apiAccessLogService.updatePmpAPIAccesslogDetails(fetchEwelcomeIDAPIAccessLogDetails);
				} catch (Exception ex) {
					LOGGER.error("Exception while inserting PMP API log details in table : {} ",
							StackTraceUtils.convertPojoToJson(ex));
				}
				return "Error while fetching already generated ewelcomeId of the participant";
			}
		}
		return null;
	}

	@Override
	public String validatePreceptorIDCardNumber(Program program, int id) {
		PMPAPIAccessLogDetails accessLogDetails = null;
		if (program.getFirstSittingBy() == 0) {
			if (null == program.getPreceptorIdCardNumber() || program.getPreceptorIdCardNumber().isEmpty()) {
				return "Preceptor ID is required for the Event";
			} else {
				try {
					if (0 != id) {
						accessLogDetails = new PMPAPIAccessLogDetails(id, EndpointConstants.ABHYASI_INFO_URI,
								DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null,
								StackTraceUtils.convertPojoToJson("Request : " + program.getPreceptorIdCardNumber()
								+ " ,Event ID : " + program.getAutoGeneratedEventId()));
						int accessdetailsID = apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);
						accessLogDetails.setId(accessdetailsID);
					}
					AbhyasiResult result;
					result = srcmRestTemplate.getAbyasiProfile(program.getPreceptorIdCardNumber());
					if (result.getUserProfile().length > 0) {
						AbhyasiUserProfile userProfile = result.getUserProfile()[0];
						if (null != userProfile) {
							if ( 0 != userProfile.getId()) {
								program.setAbyasiRefNo(program.getPreceptorIdCardNumber());
								program.setFirstSittingBy(userProfile.getId());
								program.setPreceptorName(userProfile.getName());
								programRepository.updatePreceptorDetails(program);
								if (null != accessLogDetails) {
									accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(userProfile));
									accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
									accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
									apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
								}
							}
						} else {
							if (null != accessLogDetails) {
								accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
								accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(result));
								accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
								accessLogDetails.setErrorMessage("Invalid preceptor ID");
								apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
							}
							return "Invalid preceptor ID";
						}
					} else {
						if (null != accessLogDetails) {
							accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
							accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
							accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(result));
							accessLogDetails.setErrorMessage("Invalid preceptor ID");
							apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
						}
						return "Invalid preceptor ID";
					}
				} catch (HttpClientErrorException e) {
					LOGGER.error("Exception while fecthing abhyasi profile: HttpClientErrorException : {} ",
							e.getMessage());
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
						accessLogDetails.setResponseBody(StackTraceUtils
								.convertPojoToJson("Error while fetching abhyasi profile from MySRCM : "
										+ e.getMessage()));
						accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
					return "Error while fetching abhyasi profile from MySRCM ";
				} catch (JsonParseException | JsonMappingException e) {
					LOGGER.error("Exception while fecthing abhyasi profile : JsonParseException : {} ", e.getMessage());
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
						accessLogDetails
						.setResponseBody(StackTraceUtils
								.convertPojoToJson("Error while fetching abhyasi profile from MySRCM : parsing exception "));
						accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
					return "Error while fetching abhyasi profile from MySRCM : parsing exception ";
				} catch (IOException e) {
					LOGGER.error("Exception while fecthing abhyasi profile : {} ", e.getMessage());
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
						accessLogDetails
						.setResponseBody(StackTraceUtils
								.convertPojoToJson("Error while fetching abhyasi profile from MySRCM : parsing exception "));
						accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
					return "Error while fetching abhyasi profile from MySRCM : IO exception ";
				} catch (Exception e) {
					LOGGER.error("Exception while fecthing abhyasi profile : Exception : {} ", e.getMessage());
					if (null != accessLogDetails) {
						accessLogDetails.setResponseTime(DateUtils.getCurrentTimeInMilliSec());
						accessLogDetails.setStatus(ErrorConstants.STATUS_FAILED);
						accessLogDetails
						.setResponseBody(StackTraceUtils
								.convertPojoToJson("Error while fetching abhyasi profile from MySRCM : parsing exception "));
						accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(e));
						apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);
					}
					return "Error while fetching abhyasi profile from MySRCM : Internal server Error ";
				}
			}
		}
		return null;
	}

	@Override
	public int getProgramCount(String userEmail, boolean isAdmin) {
		return programRepository.getProgramCount(userEmail, isAdmin);
	}

	@Override
	public Program getProgramDetailsToGenerateEwelcomeIDById(Integer programId) {
		return programRepository.getProgramDetailsToGenerateEwelcomeIDById(programId);
	}

	/*@Override
	public int getProgramCountWithUserRoleAndEmailId(List<String> emailList, String role) {
		return programRepository.getProgramCountWithUserRoleAndEmailId(emailList, role);
	}*/

	/*@Override
	public List<Event> getEventListByEmailAndRole(List<String> emailList, String role, int offset,int pageSize) {

		List<Event> eventList = new ArrayList<Event>();
		List<Program> programList = programRepository.getEventsByEmailAndRole(emailList, role, offset, pageSize);
		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Program program : programList) {
			Event event = new Event();
			event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
			event.setProgramChannel(program.getProgramChannel());
			event.setProgramName(program.getProgramName());
			if (null == program.getProgramStartDate()) {
				event.setProgramStartDate("");
			} else {
				try {
					event.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
				} catch (Exception e) {
					event.setProgramStartDate("");
				}
			}
			if (null == program.getProgramEndDate()) {
				event.setProgramEndDate("");
			} else {
				try {
					event.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
				} catch (Exception e) {
					event.setProgramEndDate("");
				}
			}
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setOrganizationName(program.getOrganizationName());
			event.setOrganizationDepartment(program.getOrganizationDepartment());
			event.setEventPlace(program.getEventPlace());
			event.setEventCity(program.getEventCity());
			event.setEventState(program.getEventState());
			event.setEventCountry(program.getEventCountry());
			event.setPreceptorName(program.getPreceptorName());
			event.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
			event.setRemarks(program.getRemarks());
			event.setJiraIssueNumber(program.getJiraIssueNumber());
			event.setIsReadOnly(CoordinatorAccessControlConstants.IS_READ_ONLY_FALSE);
			event.setBatchDescription(program.getBatchDescription());
			event.setProgramChannelType(program.getProgramChannelType());
			event.setProgramAddress(program.getProgramAddress());
			event.setProgramDistrict(program.getProgramDistrict());
			event.setProgramZone(program.getProgramZone());
			event.setProgramCenter(program.getProgramCenter());
			event.setOrganizationContactName(program.getOrganizationContactName());
			event.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
			event.setOrganizationContactEmail(program.getOrganizationContactEmail());
			event.setOrganizationContactMobile(program.getOrganizationContactMobile());
			event.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			eventList.add(event);
		}

		return eventList;
	}*/

	/*@Override
	public int getPgrmCountBySrchParamsWithUserRoleAndEmailId(SearchRequest searchRequest, List<String> emailList,String role) {
		for (EventSearchField searchField : EventSearchField.values()) {
			if (searchField.name().equals(searchRequest.getSearchField())) {
				searchRequest.setSearchField(searchField.getValue());
			}

			if (searchField.name().equals(searchRequest.getSortBy())) {
				searchRequest.setSortBy(searchField.getValue());
			}
		}
		return programRepository.getPgrmCountBySrchParamsWithUserRoleAndEmailId(searchRequest, emailList, role);
	}*/

	/*@Override
	public List<Event> searchEventsWithUserRoleAndEmailId(SearchRequest searchRequest, List<String> emailList,String role, int offset) {
		List<Event> eventList = new ArrayList<Event>();

		List<Program> programList = programRepository.searchEventsWithUserRoleAndEmailId(searchRequest, emailList,role, offset);

		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Program program : programList) {
			Event event = new Event();
			event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
			event.setProgramChannel(program.getProgramChannel());
			event.setProgramName(program.getProgramName());
			if (null == program.getProgramStartDate()) {
				event.setProgramStartDate("");
			} else {
				try {
					event.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
				} catch (Exception e) {
					event.setProgramStartDate("");
				}
			}
			if (null == program.getProgramEndDate()) {
				event.setProgramEndDate("");
			} else {
				try {
					event.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
				} catch (Exception e) {
					event.setProgramEndDate("");
				}
			}
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setOrganizationName(program.getOrganizationName());
			event.setOrganizationDepartment(program.getOrganizationDepartment());
			event.setEventPlace(program.getEventPlace());
			event.setEventCity(program.getEventCity());
			event.setEventState(program.getEventState());
			event.setEventCountry(program.getEventCountry());
			event.setPreceptorName(program.getPreceptorName());
			event.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
			event.setJiraIssueNumber(program.getJiraIssueNumber());
			event.setIsReadOnly(CoordinatorAccessControlConstants.IS_READ_ONLY_FALSE);
			event.setBatchDescription(program.getBatchDescription());
			event.setProgramChannelType(program.getProgramChannelType());
			event.setProgramAddress(program.getProgramAddress());
			event.setProgramDistrict(program.getProgramDistrict());
			event.setProgramZone(program.getProgramZone());
			event.setProgramCenter(program.getProgramCenter());
			event.setOrganizationContactName(program.getOrganizationContactName());
			event.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
			event.setOrganizationContactEmail(program.getOrganizationContactEmail());
			event.setOrganizationContactMobile(program.getOrganizationContactMobile());
			event.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			eventList.add(event);
		}

		for (EventSearchField searchField : EventSearchField.values()) {
			if (searchRequest.getSearchField().equals(searchField.getValue())) {
				searchRequest.setSearchField(searchField.name());
			}
			if (searchRequest.getSortBy().equals(searchField.getValue())) {
				searchRequest.setSortBy(searchField.name());
			}
		}

		return eventList;
	}*/

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.srcm.heartfulness.service.ProgramService#createOrUpdateProgram(org
	 * .srcm.heartfulness.model.json.request.Event, int)
	 */
	@Override
	public void createOrUpdateProgram(Event event, int id) {
		SimpleDateFormat initialsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		Map<String, String> errors = new HashMap<String, String>();
		errors = eventDashboardValidator.checkMandatoryEventFields(event);
		if (!errors.isEmpty()) {
			event.setErrors(errors);
			event.setStatus(ErrorConstants.STATUS_FAILED);
		} else {
			Program program = programRepository
					.findByAutoGeneratedEventId(null != event.getAutoGeneratedEventId() ? event
							.getAutoGeneratedEventId() : null);
			String preceptorIdValidationResponse = null;
			String existingCoordinatorEmailId = null != program.getCoordinatorEmail() ? program.getCoordinatorEmail(): "";
			String existingPreceptorId = null != program.getPreceptorIdCardNumber() ? program.getPreceptorIdCardNumber() : "";

			CoordinatorEmail coordinatorEmail = new CoordinatorEmail();
			coordinatorEmail.setCoordinatorEmail( (null == program.getCoordinatorEmail() || program.getCoordinatorEmail().isEmpty()) ? event.getCoordinatorEmail() : program.getCoordinatorEmail());
			coordinatorEmail.setCoordinatorName((null == program.getCoordinatorName() || program.getCoordinatorName().isEmpty()) ? event.getCoordinatorName() : program.getCoordinatorName());
			coordinatorEmail.setEventName((null == program.getProgramChannel() || program.getProgramChannel().isEmpty()) ? event.getProgramChannel() : program.getProgramChannel());
			SimpleDateFormat inputsdf = new SimpleDateFormat(ExpressionConstants.MAIL_DATE_FORMAT);
			try {
				coordinatorEmail.setProgramCreateDate( inputsdf.parse(event.getProgramStartDate()));
			} catch (ParseException pe) {
				coordinatorEmail.setProgramCreateDate(null);
			}

			program.setProgramChannel(event.getProgramChannel());
			try {
				program.setProgramStartDate(initialsdf.parse(event.getProgramStartDate()));
			} catch (ParseException e) {
				errors.put("programStartDate", "Error while parsing Program Start Date");
				event.setErrors(errors);
			}

			if (null == event.getProgramEndDate()) {
				program.setProgramEndDate(null);
			} else if (event.getProgramEndDate().isEmpty()) {
				program.setProgramEndDate(null);
			} else {
				try {
					program.setProgramEndDate(initialsdf.parse(event.getProgramEndDate()));
				} catch (ParseException e) {
					errors.put("programEndDate", "Error while parsing Program End Date");
					event.setErrors(errors);
				}
			}
			program.setAutoGeneratedEventId(null != event.getAutoGeneratedEventId() ? event.getAutoGeneratedEventId(): null);
			program.setProgramName(event.getProgramName());
			program.setProgramZone(event.getProgramZone());
			program.setProgramCenter(event.getProgramCenter());
			program.setCoordinatorName(event.getCoordinatorName());
			program.setCoordinatorEmail(event.getCoordinatorEmail());
			program.setCoordinatorMobile(event.getCoordinatorMobile());
			program.setCoordinatorAbhyasiId(event.getCoordinatorAbhyasiId());
			program.setEventPlace(event.getEventPlace());
			program.setEventCity(event.getEventCity());
			program.setEventState(event.getEventState());
			program.setEventCountry(event.getEventCountry());
			program.setOrganizationDepartment(event.getOrganizationDepartment());
			program.setOrganizationName(event.getOrganizationName());
			program.setOrganizationWebSite(event.getOrganizationWebSite());
			program.setOrganizationBatchNo(event.getOrganizationBatchNo());
			program.setOrganizationCity(event.getOrganizationCity());
			program.setOrganizationLocation(event.getOrganizationLocation());
			program.setOrganizationFullAddress(event.getOrganizationFullAddress());
			program.setOrganizationContactName(event.getOrganizationContactName());
			program.setOrganizationContactEmail(event.getOrganizationContactEmail());
			program.setOrganizationContactMobile(event.getOrganizationContactMobile());
			program.setOrganizationDecisionMakerName(event.getOrganizationDecisionMakerName());
			program.setOrganizationDecisionMakerEmail(event.getOrganizationDecisionMakerEmail());
			program.setOrganizationDecisionMakerPhoneNo(event.getOrganizationDecisionMakerPhoneNo());
			program.setPreceptorIdCardNumber(event.getPreceptorIdCardNumber());
			program.setWelcomeCardSignedByName(event.getWelcomeCardSignedByName());
			program.setWelcomeCardSignerIdCardNumber(event.getWelcomeCardSignerIdCardNumber());
			program.setRemarks(event.getRemarks());
			program.setCreatedSource(PMPConstants.CREATED_SOURCE_DASHBOARD);
			program.setJiraIssueNumber(event.getJiraIssueNumber());
			if(0 != program.getUserId()){
				program.setUploaderMail(userRepository.getUserMailWithId(program.getUserId()).getEmail());
			}
			program.setBatchDescription(event.getBatchDescription());
			program.setProgramAddress(event.getProgramAddress());
			program.setProgramDistrict(event.getProgramDistrict());
			program.setOrganizationContactDesignation(event.getOrganizationContactDesignation());
			program.setProgramChannelType(event.getProgramChannelType());
			if (null == event.getIsEwelcomeIdGenerationDisabled()
					|| event.getIsEwelcomeIdGenerationDisabled().trim().isEmpty()) {
				errors.put("isEwelcomeIdGenerationDisabled", "EwelcomeId Generation Disabled state is required");
				event.setErrors(errors);
			} else if (event.getIsEwelcomeIdGenerationDisabled().trim()
					.equals(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE)) {
				program.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE);
				event.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_DISABLED_STATE);
			} else {
				program.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
				event.setIsEwelcomeIdGenerationDisabled(EventDetailsUploadConstants.EWELCOME_ID_ENABLED_STATE);
			}
			if (errors.isEmpty()) {
				if(!existingPreceptorId.equalsIgnoreCase(program.getPreceptorIdCardNumber())){
					preceptorIdValidationResponse = coordinatorAccessControlService.validatePreceptorIDCardNumberandCreateUser(program, id, null);
					if(null != preceptorIdValidationResponse){
						coordinatorEmail.setEventID(program.getAutoGeneratedEventId());
						coordinatorEmail.setJiraNumber( null != event.getJiraIssueNumber() ? event.getJiraIssueNumber() : null != program.getJiraIssueNumber() ? program.getJiraIssueNumber() :"");
						coordinatorEmail.setUploaderMail(program.getUploaderMail());
						Runnable task = new Runnable() {
							@Override
							public void run() {
								try {
									coordinatorAccessControlMail.sendMailToCoordinatorToUpdatePreceptorID(coordinatorEmail);
								} catch (Exception ex) {
									LOGGER.error("Error while sending email to the coordinator {} about informing invalid preceptor Id ",program.getCoordinatorEmail());
								}
							}
						};
						new Thread(task, "ServiceThread").start();
						programRepository.save(program);
					}
				}else{
					programRepository.save(program);
				}
				/*if (null != preceptorIdValidationResponse) {
					errors.put("PreceptorId Card Number", preceptorIdValidationResponse);
					event.setErrors(errors);
				} else {*/
				event.setPreceptorName(program.getPreceptorName());
				validateAndSaveProgramAndProgramCoordinators(id, program, existingCoordinatorEmailId);
				participantService.updateParticipantEWelcomeIDStatuswithProgramID(program.getProgramId(),PMPConstants.EWELCOMEID_TO_BE_CREATED_STATE, preceptorIdValidationResponse);
				event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
				event.setStatus(ErrorConstants.STATUS_SUCCESS);
				//}
			} else {
				event.setStatus(ErrorConstants.STATUS_FAILED);
			}

		}

	}

	/**
	 * Method to validate the coordinator Email Id 
	 * 			and save the coordinator email as program coordinator to the event 
	 * 			and send mail to the coordinator 
	 * 			if coordinator email is valid, creates user in PMP.
	 * 
	 * @param id
	 * @param program
	 * @param existingCoordinatorEmailId
	 */
	private void validateAndSaveProgramAndProgramCoordinators(int id, Program program, String existingCoordinatorEmailId) {
		// coordinator validation
		if (!program.getCoordinatorEmail().equalsIgnoreCase(existingCoordinatorEmailId)) {

			coordinatorAccessControlService.validateCoordinatorEmailID(program, id);
			// persist coordinator details
			ProgramCoordinators programCoordinators = new ProgramCoordinators(program.getProgramId(), 0,program.getCoordinatorName(), program.getCoordinatorEmail(), 1);
			coordinatorAccessControlService.saveCoordinatorDetails(programCoordinators);

			CoordinatorAccessControlEmail accessControlEmail = new CoordinatorAccessControlEmail();
			accessControlEmail.setCoordinatorEmail(program.getCoordinatorEmail());
			accessControlEmail.setCoordinatorName(program.getCoordinatorName());
			accessControlEmail.setEventID(program.getAutoGeneratedEventId());
			accessControlEmail.setEventName(program.getProgramChannel());
			accessControlEmail.setProgramId(String.valueOf(program.getProgramId()));
			accessControlEmail.setEventPlace(program.getEventPlace());
			accessControlEmail.setUploaderMail(program.getUploaderMail());
			accessControlEmail.setJiraNumber(program.getJiraIssueNumber());
			SimpleDateFormat inputsdf = new SimpleDateFormat(ExpressionConstants.SQL_DATE_FORMAT);
			accessControlEmail.setProgramCreateDate(inputsdf.format(program.getProgramStartDate()));
			Runnable task = new Runnable() {
				@Override
				public void run() {
					LOGGER.debug(" Sending mail to coordinator : {} ",program.getCoordinatorEmail());
					coordinatorAccessControlMail.sendMailToCoordinatorWithLinktoCreateProfile(accessControlEmail);
				}
			};
			new Thread(task, "ServiceThread").start();


		}

	}

	@Override
	public List<String> fetchProgramAndParticipantDetails(String autoGeneratedEventId) {
		return programRepository.getProgramAndParticipantDetails(autoGeneratedEventId);
	}

	@Override
	public Event updateStatus(List<String> emailList, String role, String autoGeneratedEventId, String status,Program program) {
		program.setProgramStatus(status);
		programRepository.updateProgramStatus(program,status);
		return null;
	}

	@Override
	public Program getProgramByEmailAndRole(List<String> emailList, String role, String autoGeneratedEventId) {
		return programRepository.getProgramByEmailAndRole(emailList, role, autoGeneratedEventId);
	}

	@Override
	@SuppressWarnings("unchecked")
	public Event getEventDetails(List<String> emailList, String userRole, String agEventId,String authToken,PMPAPIAccessLog accessLog) {

		Event eventDetails = new Event();
		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);	

		boolean isNext = true;
		int currentPositionValue = 0;
		String currentPositionType =  "";
		List<String> mysrcmZones =  new ArrayList<String>();
		List<String> mysrcmCenters =  new ArrayList<String>();

		PMPAPIAccessLogDetails accessLogDetails = new 
				PMPAPIAccessLogDetails(accessLog.getId(), EndpointConstants.POSITIONS_API, 
						DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null, authToken);
		apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);		
		PositionAPIResult posResult = null;

		try {

			posResult = dashboardRestTemplate.findCoordinatorPosition(authToken);

			while(isNext){

				for(CoordinatorPositionResponse crdntrPosition : posResult.getCoordinatorPosition()){

					if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

						currentPositionValue = CoordinatorPosition.COUNTRY_COORDINATOR.getPositionValue();
						currentPositionType =  crdntrPosition.getPositionType().getName();

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.ZONE_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.ZONE_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.CENTER_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.CENTER_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}
					}

					if(crdntrPosition.isActive() && currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){
						posResult.setNext(null);
						break;
					}

				}

				if(null == posResult.getNext()){
					isNext = false;
				}else{
					posResult =  dashboardRestTemplate.findCoordinatorPosition(authToken,posResult.getNext());
				}
			}

		} catch (JsonParseException jpe) {
			LOGGER.error("JPE : Unable to fetch coordinator position type from MYSRCM {}",jpe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jpe));
		} catch (JsonMappingException jme) {
			LOGGER.error("JME : Unable to fetch coordinator position type from MYSRCM {}",jme.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jme));
		} catch (IOException ioe) {
			LOGGER.error("IOE : Unable to fetch coordinator position type from MYSRCM {}",ioe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ioe));
		} catch(Exception ex){
			LOGGER.error("EX : Unable to fetch coordinator position type from MYSRCM {}",ex.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ex));
		}

		accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
		accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(posResult));
		apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);

		Program program = null;

		if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){
			LOGGER.info("Logged in user {} is a country coordinator ",accessLog.getUsername());
			program = programRepository.getProgramByEmailAndRole(emailList, userRole, agEventId,currentPositionType,mysrcmCenters);

		}else if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType()) || 
				currentPositionType.equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType()) ){

			LOGGER.info("Logged in user {} is a zone/center coordinator ",accessLog.getUsername());
			DashboardRequest dashboardReq =  new DashboardRequest();
			dashboardReq.setCountry(PMPConstants.COUNTRY_INDIA);

			ResponseEntity<List<String>> getZones = (ResponseEntity<List<String>>) dashboardService.getListOfZones(authToken, dashboardReq,accessLog, emailList,userRole);
			mysrcmZones.addAll(getZones.getBody());

			for(String zone : mysrcmZones){
				DashboardRequest newRequest =  new DashboardRequest();
				newRequest.setCountry(dashboardReq.getCountry());
				newRequest.setZone(zone);
				ResponseEntity<List<String>> getCenters = (ResponseEntity<List<String>>) dashboardService.getCenterList(authToken, newRequest,accessLog, emailList,userRole);
				mysrcmCenters.addAll(getCenters.getBody());
			} 	

			LOGGER.info("Center information for log in user {} is {}",accessLog.getUsername(),mysrcmCenters.toString());
			program = programRepository.getProgramByEmailAndRole(emailList, userRole, agEventId,currentPositionType,mysrcmCenters);

		}else{

			LOGGER.info("Logged in user {} is a batch coordinator ",accessLog.getUsername());
			program = programRepository.getProgramByEmailAndRole(emailList, userRole, agEventId,currentPositionType,mysrcmCenters);

		}

		eventDetails.setProgramChannel(program.getProgramChannel());
		eventDetails.setProgramName(program.getProgramName());
		if (null == program.getProgramStartDate()) {
			eventDetails.setProgramStartDate("");
		} else {
			try {
				eventDetails.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
			} catch (Exception e) {
				eventDetails.setProgramStartDate("");
			}
		}
		if (null == program.getProgramEndDate()) {
			eventDetails.setProgramEndDate("");
		} else {
			try {

				eventDetails.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
			} catch (Exception e) {
				eventDetails.setProgramEndDate("");
			}
		}
		eventDetails.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
		eventDetails.setProgramCenter(program.getProgramCenter());
		eventDetails.setProgramZone(program.getProgramZone());
		eventDetails.setCoordinatorName(program.getCoordinatorName());
		eventDetails.setCoordinatorMobile(program.getCoordinatorMobile());
		eventDetails.setCoordinatorEmail(program.getCoordinatorEmail());
		eventDetails.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
		eventDetails.setCoordinatorPermissionLetterPath(program.getCoordinatorPermissionLetterPath());
		eventDetails.setEventPlace(program.getEventPlace());
		eventDetails.setEventCity(program.getEventCity());
		eventDetails.setEventState(program.getEventState());
		eventDetails.setEventCountry(program.getEventCountry());
		eventDetails.setOrganizationName(program.getOrganizationName());
		eventDetails.setOrganizationWebSite(program.getOrganizationWebSite());
		eventDetails.setOrganizationBatchNo(program.getOrganizationBatchNo());
		eventDetails.setOrganizationCity(program.getOrganizationCity());
		eventDetails.setOrganizationLocation(program.getOrganizationLocation());
		eventDetails.setOrganizationFullAddress(program.getOrganizationFullAddress());
		eventDetails.setOrganizationDepartment(program.getOrganizationDepartment());
		eventDetails.setOrganizationContactName(program.getOrganizationContactName());
		eventDetails.setOrganizationContactMobile(program.getOrganizationContactMobile());
		eventDetails.setOrganizationContactEmail(program.getOrganizationContactEmail());
		eventDetails.setOrganizationDecisionMakerName(program.getOrganizationDecisionMakerName());
		eventDetails.setOrganizationDecisionMakerEmail(program.getOrganizationDecisionMakerEmail());
		eventDetails.setOrganizationDecisionMakerPhoneNo(program.getOrganizationDecisionMakerPhoneNo());
		eventDetails.setPreceptorName(program.getPreceptorName());
		eventDetails.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
		eventDetails.setWelcomeCardSignedByName(program.getWelcomeCardSignedByName());
		eventDetails.setWelcomeCardSignerIdCardNumber(program.getWelcomeCardSignerIdCardNumber());
		eventDetails.setRemarks(program.getRemarks());
		eventDetails.setIsEwelcomeIdGenerationDisabled(program.getIsEwelcomeIdGenerationDisabled());
		eventDetails.setIsReadOnly(program.getIsReadOnly());
		eventDetails.setJiraIssueNumber(program.getJiraIssueNumber());
		eventDetails.setBatchDescription(program.getBatchDescription());
		eventDetails.setProgramChannelType(program.getProgramChannelType());
		eventDetails.setProgramAddress(program.getProgramAddress());
		eventDetails.setProgramDistrict(program.getProgramDistrict());
		eventDetails.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
		eventDetails.setProgramStatus(program.getProgramStatus());
		return eventDetails;

	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Event> getEventListByEmailAndRole(List<String> emailList, String role, int offset,String authToken, PMPAPIAccessLog accessLog,EventPagination eventPagination) {

		boolean isNext = true;
		int currentPositionValue = 0;
		String currentPositionType =  "";
		List<String> mysrcmZones =  new ArrayList<String>();
		List<String> mysrcmCenters =  new ArrayList<String>();
		List<Event> eventList = new ArrayList<Event>();
		List<Program> programList = new ArrayList<Program>();

		PMPAPIAccessLogDetails accessLogDetails = new 
				PMPAPIAccessLogDetails(accessLog.getId(), EndpointConstants.POSITIONS_API, 
						DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null, authToken);
		apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);		
		PositionAPIResult posResult = null;

		try {

			posResult = dashboardRestTemplate.findCoordinatorPosition(authToken);

			while(isNext){

				for(CoordinatorPositionResponse crdntrPosition : posResult.getCoordinatorPosition()){

					if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

						currentPositionValue = CoordinatorPosition.COUNTRY_COORDINATOR.getPositionValue();
						currentPositionType =  crdntrPosition.getPositionType().getName();

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.ZONE_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.ZONE_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.CENTER_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.CENTER_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}
					}

					if(crdntrPosition.isActive() && currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){
						posResult.setNext(null);
						break;
					}

				}

				if(null == posResult.getNext()){
					isNext = false;
				}else{
					posResult =  dashboardRestTemplate.findCoordinatorPosition(authToken,posResult.getNext());
				}
			}

		} catch (JsonParseException jpe) {
			LOGGER.error("JPE : Unable to fetch coordinator position type from MYSRCM {}",jpe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jpe));
		} catch (JsonMappingException jme) {
			LOGGER.error("JME : Unable to fetch coordinator position type from MYSRCM {}",jme.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jme));
		} catch (IOException ioe) {
			LOGGER.error("IOE : Unable to fetch coordinator position type from MYSRCM {}",ioe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ioe));
		} catch(Exception ex){
			LOGGER.error("EX : Unable to fetch coordinator position type from MYSRCM {}",ex.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ex));
		}

		accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
		accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(posResult));
		apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);

		if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

			LOGGER.info("Logged in user {} is a country coordinator ",accessLog.getUsername());
			eventPagination.setTotalCount(programRepository.getProgramCountForLogInCoordinator(emailList, role, currentPositionType,mysrcmCenters));
			programList = programRepository.getEventsByEmailAndRole(emailList, role, offset, eventPagination.getPageSize(),currentPositionType,mysrcmCenters);

		} else if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType()) || 
				currentPositionType.equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType()) ){

			LOGGER.info("Logged in user {} is a zone/center coordinator ",accessLog.getUsername());
			DashboardRequest dashboardReq =  new DashboardRequest();
			dashboardReq.setCountry(PMPConstants.COUNTRY_INDIA);

			ResponseEntity<List<String>> getZones = (ResponseEntity<List<String>>) dashboardService.getListOfZones(authToken, dashboardReq,accessLog, emailList,role);
			mysrcmZones.addAll(getZones.getBody());

			for(String zone : mysrcmZones){
				DashboardRequest newRequest =  new DashboardRequest();
				newRequest.setCountry(dashboardReq.getCountry());
				newRequest.setZone(zone);
				ResponseEntity<List<String>> getCenters = (ResponseEntity<List<String>>) dashboardService.getCenterList(authToken, newRequest,accessLog, emailList,role);
				mysrcmCenters.addAll(getCenters.getBody());
			}

			LOGGER.info("Center information for log in user {} is {}",accessLog.getUsername(),mysrcmCenters.toString());

			eventPagination.setTotalCount(programRepository.getProgramCountForLogInCoordinator(emailList, role, currentPositionType,mysrcmCenters));
			programList = programRepository.getEventsByEmailAndRole(emailList, role, offset, eventPagination.getPageSize(),currentPositionType,mysrcmCenters);

		} else{

			LOGGER.info("Logged in user {} is a batch coordinator ",accessLog.getUsername());
			eventPagination.setTotalCount(programRepository.getProgramCountForLogInCoordinator(emailList, role, currentPositionType,mysrcmCenters));
			programList = programRepository.getEventsByEmailAndRole(emailList, role, offset, eventPagination.getPageSize(),currentPositionType,mysrcmCenters);
		}

		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Program program : programList) {
			Event event = new Event();
			event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
			event.setProgramChannel(program.getProgramChannel());
			event.setProgramName(program.getProgramName());
			if (null == program.getProgramStartDate()) {
				event.setProgramStartDate("");
			} else {
				try {
					event.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
				} catch (Exception e) {
					event.setProgramStartDate("");
				}
			}
			if (null == program.getProgramEndDate()) {
				event.setProgramEndDate("");
			} else {
				try {
					event.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
				} catch (Exception e) {
					event.setProgramEndDate("");
				}
			}
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setOrganizationName(program.getOrganizationName());
			event.setOrganizationDepartment(program.getOrganizationDepartment());
			event.setEventPlace(program.getEventPlace());
			event.setEventCity(program.getEventCity());
			event.setEventState(program.getEventState());
			event.setEventCountry(program.getEventCountry());
			event.setPreceptorName(program.getPreceptorName());
			event.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
			event.setRemarks(program.getRemarks());
			event.setJiraIssueNumber(program.getJiraIssueNumber());
			event.setIsReadOnly(CoordinatorAccessControlConstants.IS_READ_ONLY_FALSE);
			event.setBatchDescription(program.getBatchDescription());
			event.setProgramChannelType(program.getProgramChannelType());
			event.setProgramAddress(program.getProgramAddress());
			event.setProgramDistrict(program.getProgramDistrict());
			event.setProgramZone(program.getProgramZone());
			event.setProgramCenter(program.getProgramCenter());
			event.setOrganizationContactName(program.getOrganizationContactName());
			event.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
			event.setOrganizationContactEmail(program.getOrganizationContactEmail());
			event.setOrganizationContactMobile(program.getOrganizationContactMobile());
			event.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			eventList.add(event);
		}

		return eventList;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Event> searchEventsWithUserRoleAndEmailId(SearchRequest searchRequest, List<String> emailList,
			String role, int offset, String authToken, PMPAPIAccessLog accessLog, EventPagination eventPagination) {

		boolean isNext = true;
		int currentPositionValue = 0;
		String currentPositionType =  "";
		List<String> mysrcmZones =  new ArrayList<String>();
		List<String> mysrcmCenters =  new ArrayList<String>();
		List<Event> eventList = new ArrayList<Event>();
		List<Program> programList = new ArrayList<Program>();

		PMPAPIAccessLogDetails accessLogDetails = new 
				PMPAPIAccessLogDetails(accessLog.getId(), EndpointConstants.POSITIONS_API, 
						DateUtils.getCurrentTimeInMilliSec(), null, ErrorConstants.STATUS_FAILED, null, authToken);
		apiAccessLogService.createPmpAPIAccesslogDetails(accessLogDetails);		
		PositionAPIResult posResult = null;

		try {

			posResult = dashboardRestTemplate.findCoordinatorPosition(authToken);

			while(isNext){

				for(CoordinatorPositionResponse crdntrPosition : posResult.getCoordinatorPosition()){

					if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

						currentPositionValue = CoordinatorPosition.COUNTRY_COORDINATOR.getPositionValue();
						currentPositionType =  crdntrPosition.getPositionType().getName();

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.ZONE_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.ZONE_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}

					} else if(crdntrPosition.isActive() && crdntrPosition.getPositionType().getName().equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType())){

						if(CoordinatorPosition.CENTER_COORDINATOR.getPositionValue() > currentPositionValue){
							currentPositionValue = CoordinatorPosition.CENTER_COORDINATOR.getPositionValue();
							currentPositionType =  crdntrPosition.getPositionType().getName();
						}
					}

					if(crdntrPosition.isActive() && currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){
						posResult.setNext(null);
						break;
					}

				}

				if(null == posResult.getNext()){
					isNext = false;
				}else{
					posResult =  dashboardRestTemplate.findCoordinatorPosition(authToken,posResult.getNext());
				}
			}

		} catch (JsonParseException jpe) {
			LOGGER.error("JPE : Unable to fetch coordinator position type from MYSRCM {}",jpe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jpe));
		} catch (JsonMappingException jme) {
			LOGGER.error("JME : Unable to fetch coordinator position type from MYSRCM {}",jme.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(jme));
		} catch (IOException ioe) {
			LOGGER.error("IOE : Unable to fetch coordinator position type from MYSRCM {}",ioe.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ioe));
		} catch(Exception ex){
			LOGGER.error("EX : Unable to fetch coordinator position type from MYSRCM {}",ex.getMessage());
			accessLogDetails.setErrorMessage(StackTraceUtils.convertStackTracetoString(ex));
		}

		accessLogDetails.setStatus(ErrorConstants.STATUS_SUCCESS);
		accessLogDetails.setResponseBody(StackTraceUtils.convertPojoToJson(posResult));
		apiAccessLogService.updatePmpAPIAccesslogDetails(accessLogDetails);

		for (EventSearchField searchField : EventSearchField.values()) {
			if (searchField.name().equals(searchRequest.getSearchField())) {
				searchRequest.setSearchField(searchField.getValue());
			}
		}
		
		if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.COUNTRY_COORDINATOR.getPositionType())){

			LOGGER.info("Logged in user {} is a country coordinator ",accessLog.getUsername());
			eventPagination.setTotalCount(programRepository.getPgrmCountBySrchParamsForLogInCoordinator(searchRequest, emailList, role,currentPositionType,mysrcmCenters));
			programList = programRepository.searchEventsWithUserRoleAndEmailId(searchRequest,emailList, role, offset,currentPositionType,mysrcmCenters);

		} else if(currentPositionType.equalsIgnoreCase(CoordinatorPosition.ZONE_COORDINATOR.getPositionType()) || 
				currentPositionType.equalsIgnoreCase(CoordinatorPosition.CENTER_COORDINATOR.getPositionType()) ){

			LOGGER.info("Logged in user {} is a zone/center coordinator ",accessLog.getUsername());
			DashboardRequest dashboardReq =  new DashboardRequest();
			dashboardReq.setCountry(PMPConstants.COUNTRY_INDIA);

			ResponseEntity<List<String>> getZones = (ResponseEntity<List<String>>) dashboardService.getListOfZones(authToken, dashboardReq,accessLog, emailList,role);
			mysrcmZones.addAll(getZones.getBody());

			for(String zone : mysrcmZones){
				DashboardRequest newRequest =  new DashboardRequest();
				newRequest.setCountry(dashboardReq.getCountry());
				newRequest.setZone(zone);
				ResponseEntity<List<String>> getCenters = (ResponseEntity<List<String>>) dashboardService.getCenterList(authToken, newRequest,accessLog, emailList,role);
				mysrcmCenters.addAll(getCenters.getBody());
			}
			
			LOGGER.info("Center information for log in user {} is {}",accessLog.getUsername(),mysrcmCenters.toString());

			eventPagination.setTotalCount(programRepository.getPgrmCountBySrchParamsForLogInCoordinator(searchRequest, emailList, role,currentPositionType,mysrcmCenters));
			programList = programRepository.searchEventsWithUserRoleAndEmailId(searchRequest,emailList, role, offset,currentPositionType,mysrcmCenters);

		} else{

			LOGGER.info("Logged in user {} is a batch coordinator ",accessLog.getUsername());

			eventPagination.setTotalCount(programRepository.getPgrmCountBySrchParamsForLogInCoordinator(searchRequest, emailList, role,currentPositionType,mysrcmCenters));
			programList = programRepository.searchEventsWithUserRoleAndEmailId(searchRequest,emailList, role, offset,currentPositionType,mysrcmCenters);
		}

		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);
		for (Program program : programList) {
			Event event = new Event();
			event.setAutoGeneratedEventId(program.getAutoGeneratedEventId());
			event.setProgramChannel(program.getProgramChannel());
			event.setProgramName(program.getProgramName());
			if (null == program.getProgramStartDate()) {
				event.setProgramStartDate("");
			} else {
				try {
					event.setProgramStartDate(convertedsdf.format(program.getProgramStartDate()));
				} catch (Exception e) {
					event.setProgramStartDate("");
				}
			}
			if (null == program.getProgramEndDate()) {
				event.setProgramEndDate("");
			} else {
				try {
					event.setProgramEndDate(convertedsdf.format(program.getProgramEndDate()));
				} catch (Exception e) {
					event.setProgramEndDate("");
				}
			}
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setOrganizationName(program.getOrganizationName());
			event.setOrganizationDepartment(program.getOrganizationDepartment());
			event.setEventPlace(program.getEventPlace());
			event.setEventCity(program.getEventCity());
			event.setEventState(program.getEventState());
			event.setEventCountry(program.getEventCountry());
			event.setPreceptorName(program.getPreceptorName());
			event.setPreceptorIdCardNumber(program.getPreceptorIdCardNumber());
			event.setJiraIssueNumber(program.getJiraIssueNumber());
			event.setIsReadOnly(CoordinatorAccessControlConstants.IS_READ_ONLY_FALSE);
			event.setBatchDescription(program.getBatchDescription());
			event.setProgramChannelType(program.getProgramChannelType());
			event.setProgramAddress(program.getProgramAddress());
			event.setProgramDistrict(program.getProgramDistrict());
			event.setProgramZone(program.getProgramZone());
			event.setProgramCenter(program.getProgramCenter());
			event.setOrganizationContactName(program.getOrganizationContactName());
			event.setOrganizationContactDesignation(program.getOrganizationContactDesignation());
			event.setOrganizationContactEmail(program.getOrganizationContactEmail());
			event.setOrganizationContactMobile(program.getOrganizationContactMobile());
			event.setCoordinatorAbhyasiId(program.getCoordinatorAbhyasiId());
			event.setCoordinatorName(program.getCoordinatorName());
			event.setCoordinatorEmail(program.getCoordinatorEmail());
			event.setCoordinatorMobile(program.getCoordinatorMobile());
			eventList.add(event);
		}

		for (EventSearchField searchField : EventSearchField.values()) {
			if (searchRequest.getSearchField().equals(searchField.getValue())) {
				searchRequest.setSearchField(searchField.name());
			}
		}

		return eventList;
	}


	private List<ParticipantRequest> getParticipantList(String eventId, List<Participant> participantList){

		List<ParticipantRequest> participantReqList = new ArrayList<ParticipantRequest>();
		SimpleDateFormat convertedsdf = new SimpleDateFormat(ExpressionConstants.DATE_FORMAT);

		for (Participant participant : participantList) {
			ParticipantRequest participantReq = new ParticipantRequest();
			participantReq.setSeqId(participant.getSeqId());
			participantReq.setEventId(eventId);
			participantReq.setPrintName(participant.getPrintName());
			participantReq.setEmail(participant.getEmail());
			participantReq.setMobilePhone(participant.getMobilePhone());
			if (null == participant.getIntroductionDate()) {
				participantReq.setIntroductionDate("");
			} else {
				try {
					participantReq.setIntroductionDate(convertedsdf.format(participant.getIntroductionDate()));
				} catch (Exception e) {
					participantReq.setIntroductionDate("");
				}
			}
			if (null == participant.getGender()) {
				participantReq.setGender("");
			} else if (PMPConstants.GENDER_MALE.equals(participant.getGender())) {
				participantReq.setGender(PMPConstants.MALE);
			} else if (PMPConstants.GENDER_FEMALE.equals(participant.getGender())) {
				participantReq.setGender(PMPConstants.FEMALE);
			} else {
				participantReq.setGender("");
			}

			if (null == participant.getDateOfBirth()) {
				participantReq.setDateOfBirth("");
			} else {
				try {
					participantReq.setDateOfBirth(convertedsdf.format(participant.getDateOfBirth()));
				} catch (Exception e) {
					participantReq.setDateOfBirth("");
				}
			}

			if (null == participant.getFirstSittingDate()) {
				participantReq.setFirstSittingDate("");
			} else {
				try {
					participantReq.setFirstSittingDate(convertedsdf.format(participant.getFirstSittingDate()));
				} catch (Exception e) {
					participantReq.setFirstSittingDate("");
				}
			}
			if (null == participant.getSecondSittingDate()) {
				participantReq.setSecondSittingDate("");
			} else {
				try {
					participantReq.setSecondSittingDate(convertedsdf.format(participant.getSecondSittingDate()));
				} catch (Exception e) {
					participantReq.setSecondSittingDate("");
				}
			}
			if (null == participant.getThirdSittingDate()) {
				participantReq.setThirdSittingDate("");
			} else {
				try {
					participantReq.setThirdSittingDate(convertedsdf.format(participant.getThirdSittingDate()));
				} catch (Exception e) {
					participantReq.setThirdSittingDate("");
				}
			}
			participantReq.setFirstSitting((null != participant.getFirstSitting() && 1 == participant
					.getFirstSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
			participantReq.setSecondSitting((null != participant.getSecondSitting() && 1 == participant
					.getSecondSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
			participantReq.setThirdSitting((null != participant.getThirdSitting() && 1 == participant
					.getThirdSitting()) ? PMPConstants.REQUIRED_YES : PMPConstants.REQUIRED_NO);
			participantReq.setAddressLine1(participant.getAddressLine1());
			participantReq.setAddressLine2(participant.getAddressLine2());
			participantReq.setCity(participant.getCity());
			participantReq.setState(participant.getState());
			participantReq.setCountry(participant.getCountry());
			participantReq.setAbhyasiId(participant.getAbhyasiId());
			participantReq.setIntroducedBy(participant.getIntroducedBy());
			participantReq.setIntroducedStatus(1 == participant.getIntroduced() ? PMPConstants.REQUIRED_YES
					: PMPConstants.REQUIRED_NO);
			participantReq.seteWelcomeID((null != participant.getWelcomeCardNumber() && !participant
					.getWelcomeCardNumber().isEmpty()) ? participant.getWelcomeCardNumber() : null);
			participantReq.setEwelcomeIdRemarks(participant.getEwelcomeIdRemarks());
			participantReq.setPhone(participant.getPhone());
			participantReq.setDistrict(participant.getDistrict());
			participantReq.setAgeGroup(participant.getAgeGroup());
			participantReqList.add(participantReq);
		}
		return participantReqList;

	}
}
