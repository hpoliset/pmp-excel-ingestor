package org.srcm.heartfulness.web;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.srcm.heartfulness.encryption.decryption.AESEncryptDecrypt;
import org.srcm.heartfulness.helper.AuthorizationHelper;
import org.srcm.heartfulness.model.Program;
import org.srcm.heartfulness.service.ProgramService;

@Controller
public class EventController {

	private static Logger LOGGER = LoggerFactory.getLogger(EventController.class);

	@Autowired
	AESEncryptDecrypt encryptDecrypt;

	@Autowired
	Environment env;

	@Autowired
	ProgramService programService;

	@Autowired
	AuthorizationHelper authHelper;

	@RequestMapping(value = "/updateevent", method = RequestMethod.GET)
	public String showEventForm(@RequestParam(required = false, value = "id") String encryptedValue,
			HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) {
		String response = "redirect:/home";
		try {
			if (request.getSession().getAttribute("Authentication") != null) {
				authHelper.setcurrentUsertoContext(request.getSession());
				String eventId = encryptedValue;
				try {
					eventId = encryptDecrypt.decrypt(encryptedValue, env.getProperty("security.encrypt.token"));
				} catch (Exception ex) {
					LOGGER.debug("Invalid Event ID :" + eventId + " Please provide a valid Event ID.");
				}
				Program program = programService.findByAutoGeneratedEventId(eventId);
				if (program.getProgramId() > 0) {
					model.addAttribute("program", program);
					response = "programform";
				} else {
					model.addAttribute("message", "Incorrect Event ID. Please provide a valid Event ID.");
					response = "eventsuccess";
				}
			} else {
				redirectAttributes.addFlashAttribute("redirecturl", "/updateevent?id=" + encryptedValue);
				response = "redirect:/home";
			}
		} catch (Exception e) {
			return response;
		}
		return response;
	}

	@RequestMapping(value = "/saveevent", method = RequestMethod.POST)
	public String modifyEvent(@ModelAttribute("program") Program program, Model model, BindingResult result) {
		if (!result.hasErrors()) {
			programService.createProgram(program);
			model.addAttribute("message", "Event successfully updated ");
		}
		model.addAttribute("program", program);
		return "programform";
	}

}
